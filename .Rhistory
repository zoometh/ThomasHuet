catC <- data.frame(x = mean(x1) + runif(nb.pts, 2, 4),
y = mean(x1) + runif(nb.pts, 2, 4),
feat = rep("C", nb.pts),
row.names = paste0(rep("C", nb.pts),".",seq(1,nb.pts)))
catD <- data.frame(x = mean(x1) + runif(nb.pts, 3, 6),
y = mean(x1) + runif(nb.pts, 3, 6),
feat = rep("D", nb.pts),
row.names = paste0(rep("D", nb.pts),".",seq(1,nb.pts)))
df <- rbind(catA, catB, catC, catD)
# distances to the mean
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
df$dist.to.mean <- dist.to.mean[ , 1]
df.colors <- data.frame(feat = c("A", "B", "C", "D"),
color = c("red", "green", "blue", "pink"))
df.rownames <- rownames(df)
df.rownames
df.rownames <- rownames(df)
# print(df.rownames)
df <- merge(df, df.colors, by = "feat", all.x = T)
df$lbl <- df.rownames
df
ggplot(df, aes(y = 0, x = dist.to.mean, color = color)) +
geom_point(aes(size = 1.5)) +
geom_text_repel(aes(color = "black", label = lbl)) +
# geom_text(aes(y = 0, x = dist.to.mean, label = round(dist.to.mean, 2, cex = .5, vjust = .5))) +
theme_bw() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_identity(guide = "legend", name = "features", breaks = df$color, label = df$feat)
df
runApp('teachings/stats/stats/spat-nearest')
runApp('teachings/stats/stats/spat-nearest')
runApp('teachings/stats/stats/spat-nearest')
?coordinates
shiny::runApp('teach/stats/stats/spat-nearest')
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
Place.coords.path <- "../dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords.path <- read.csv("https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim2-map/oxfordpots_data.csv")
Place.coords.path
runApp('teach/stats/stats/dim2-map')
Place.coords
Place.coords <- read.csv("https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim2-map/oxfordpots_data.csv")
Place.coords
Place.coords <- read.csv("https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim2-map/oxfordpots_data.csv")
Place.coords
names(Place.coords) <- c("Place", "lon", "lat")
Place.coords
runApp('teach/stats/stats/dim2-map')
runApp('teach/stats/stats/dim2-map')
Place.coords
runApp('teach/stats/stats/dim2-map')
#| eval: true
#| echo: true
ncolors <- 5
x <- sort(sample.int(100, ncolors))
colors <- RColorBrewer::brewer.pal(ncolors, name = "YlGn")
df <- data.frame(values = x,
colors = colors)
dt <- datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
dt
#| eval: true
#| echo: true
ncolors <- 5
x <- sort(sample.int(100, ncolors))
colors <- RColorBrewer::brewer.pal(ncolors, name = "YlGn")
df <- data.frame(values = x,
colors = colors)
dt <- datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
dt
runApp('teach/stats/stats/dim2-map')
library(DescTools)
library(DescTools)
x <- c(50, 50, 70, 70, 70, 90, 150, 150, 150, 150)
Gini(x)
Gini(x)
plot(Lc(x))
plot(Lc(x), main = "serie 1")
plot(Lc(serie.1), main = "serie 1", sub = paste0("Gini", Gini(serie.1)))
serie.1 <- c(50, 50, 70, 70, 70, 90, 150, 150, 150, 150)
plot(Lc(serie.1), main = "serie 1", sub = paste0("Gini", Gini(serie.1)))
plot(Lc(serie.1), main = "serie 1", sub = paste0("Gini: ", round(Gini(serie.1)), 2))
plot(Lc(serie.1), main =  paste0("Gini: ", round(Gini(serie.1)), 2), sub = "serie 1")
Gini(serie.1)
round(Gini(serie.1)), 2)
plot(Lc(serie.1), main =  paste0("Gini: ", round(Gini(serie.1), 2), sub = "serie 1"))
plot(Lc(serie.1), main =  paste0("Gini: ", round(Gini(serie.1), 2)), sub = "serie 1")
runApp('teach/stats/stats/test.R')
runif(10, 0, 100)
round(runif(10, 0, 100))
runApp('teach/stats/stats/test.R')
serie.2
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
serie.1 <- sort(round(runif(10, 0, 200)))
runApp('teach/stats/stats/test.R')
paste0("serie 2", ": ", serie)
serie <- serie.1
paste0("serie 2", ": ", serie)
paste0("serie 2", ": ", paste0(serie, collapse = ","))
paste0("serie 2", ": ", paste0(serie, collapse = ", "))
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
serie.1 <- sort(round(runif(10, 0, 200)))
ggplot(serie.1) +
geom_boxplot()
serie.1
ggplot(data.frame(serie.1)) +
geom_boxplot()
data.frame(serie.1)
ggplot(data.frame(serie.1), aes(x = "", y = serie.1)) +
geom_boxplot()
ggplot(data.frame(serie.1), aes(x = "", y = serie.1)) +
geom_boxplot() +
theme_bw()
ggplot(data.frame(serie.1), aes(x = "", y = serie.1)) +
geom_boxplot() +
geom_point()
data.frame(serie.1, serie.2)
serie.2 <- sort(round(runif(10, 0, 30)))
data.frame(serie.1, serie.2)
ToothGrowth
df <- data.frame(serie.1, serie.2)
reshape(df)
reshape(df, direction = "long")
df.serie.1 <- data.frame(serie.1)
df.serie.1
df.serie.1$serie <- "serie 1"
df.serie.1 <- data.frame(serie.1)
df.serie.1$serie <- "serie 1"
df.serie.2 <- data.frame(serie.2)
df.serie.2$serie <- "serie 2"
rbind(df.serie.1, df.serie.2)
rownames(df.serie.1) <- c("val", "serie")
df.serie.1 <- data.frame(serie.1)
df.serie.1$serie <- "serie 1"
rownames(df.serie.1) <- c("val", "serie")
df.serie.1 <- data.frame(serie.1)
df.serie.1$serie <- "serie 1"
df.serie.1
rownames(df.serie.1) <- c("val", "serie.")
df.serie.1 <- data.frame(serie.1)
df.serie.1$serie <- "serie 1"
colnames(df.serie.1) <- c("val", "serie")
df.serie.2 <- data.frame(serie.2)
df.serie.2$serie <- "serie 2"
colnames(df.serie.2) <- c("val", "serie")
rbind(df.serie.1, df.serie.2)
df <- rbind(df.serie.1, df.serie.2)
df.serie.1 <- data.frame(serie.1)
df.serie.1$serie <- "serie 1"
colnames(df.serie.1) <- c("val", "serie")
df.serie.2 <- data.frame(serie.2)
df.serie.2$serie <- "serie 2"
colnames(df.serie.2) <- c("val", "serie")
df <- rbind(df.serie.1, df.serie.2)
ggplot(df, aes(x = serie, y = val)) +
geom_boxplot() +
geom_point() +
theme_bw()
ggplot(df, aes(x = serie, y = val)) +
geom_boxplot() +
geom_point() +
theme_bw() +
xlab("")
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/test.R')
runApp('teach/stats/stats/gini')
runApp('teach/stats/stats/seriation')
runApp('teach/stats/stats/boxplot')
runApp('teach/stats/stats/gini')
runApp('teach/stats/stats/normal')
x <- seq(-5, 5, length = 1000)
x
ggplot() +
geom_histogram(x)
ggplot() +
geom_histogram(aes(x))
x <- seq(-5, 5, length = 100)
ggplot() +
geom_histogram(aes(x))
ggplot() +
geom_histogram(aes(x), binwidth = 0.01)
x <- seq(-5, 5, length = 100)
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- dnorm(x, mean = 0, sd = .4)
gplot <- ggplot() +
# geom_histogram(aes(x), binwidth = 0.01) +
geom_line(aes(x, y), color = "black") +
ylim(0, 1) +
theme_bw()
gplot
x <- seq(-5, 5, length = 100)
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- dnorm(x, mean = 0, sd = .4)
gplot <- ggplot() +
geom_histogram(aes(y), binwidth = 0.01) +
geom_line(aes(x, y), color = "black") +
ylim(0, 1) +
theme_bw()
gplot
set.seed(1)
df <- data.frame(PF = 10*rnorm(1000))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$PF), sd = sd(df$PF)))
df
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- dnorm(x, mean = 0, sd = .4)
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5, by = 1),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
df
x <- seq(-5, 5, length = 100)
x
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- rnorm(x, mean = 0, sd = .4)
x <- seq(-5, 5, length = 100)
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- rnorm(x, mean = 0, sd = .4)
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
x <- seq(-5, 5, length = 1000)
# y <- dnorm(x, mean = input$mean, sd = input$sd)
y <- rnorm(x, mean = 0, sd = .4)
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
x <- seq(-5, 5, length = 1000)
y <- rnorm(x, mean = input$mean, sd = input$sd)
# df <- data.frame(PF = 10*rnorm(1000))
df <- data.frame(PF = y)
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5),
colour = "black",
fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(df$PF),
sd = sd(df$PF)))
runApp('teach/stats/stats/normal')
normConfInt <- function(x, alpha = 0.05)
mean(x) + qt(1 - alpha / 2, length(x) - 1) * sd(x) / sqrt(length(x)) * c(-1, 1)
normConfInt(y)
normConfInt <- function(x, alpha = 0.05)
mean(x) + qt(1 - alpha / 2, length(x) - 1) * sd(x) / sqrt(length(x)) * c(-1, 1)
normConfInt(x)
normConfInt(x)[1]
runApp('teach/stats/stats/normal')
x <- rnorm(20)
x
?rnorm
runApp('teach/stats/stats/normal')
mu <- 0                                 # Standard normal distribution
sd <- 1.0
alpha <- 0.05                           # 95% confidence interval
xcdf <- seq(mu-3*sd, mu+3*sd, len=100)  # cumulative distribution function
ycdf <- pnorm(xcdf, mean=mu, sd=sd)
plot(NULL,NULL, xlim=range(xcdf), ylim=c(0,1),
xlab="Value", ylab="Cumulative distribution function", las=1)
# connect mu with median
x0 <- min(xcdf)
x0 <- -2.8
pp <- c(alpha/2, 0.5, 1-alpha/2)
for (i in 1:length(pp)) {
p <- pp[i]
x <- qnorm(p, mean=mu, sd=sd)
y0 <- ifelse(i==3, 0.04, 0)
lines(c(x0, x,x), c(p,p,y0), col=mgray)
text(-3,p,sprintf("%.3f", p), cex=0.8, col=mgray)
if (i==3) text(x,0, sprintf("%.2f", x), cex=0.8, col=mgray)
xmid <- (x0+x)/2
arrows(xmid,p,xmid+0.01,p, col=mgray, length=0.1)
if (p<0.1) next # skip vertical arrows if there is no place
arrows(x,p/2,x,p/2-0.01, col=mgray, length=0.1)
}
# Foreground: CDF
lines(xcdf,ycdf, col=red, lwd=2)
library(rtrim)
install.packages("rtrim")
rm(list=ls()) # Always start with a clean slate
library(rtrim)
red   <- "#E41A1C" # Set up some nice colors
blue  <- "#377EB8"
green <- "#4daf4a"
lgray <- gray(0.8)
mgray <- gray(0.5)
dgray <- gray(0.2)
mu <- 0                                 # Standard normal distribution
sd <- 1.0
alpha <- 0.05                           # 95% confidence interval
xcdf <- seq(mu-3*sd, mu+3*sd, len=100)  # cumulative distribution function
ycdf <- pnorm(xcdf, mean=mu, sd=sd)
plot(NULL,NULL, xlim=range(xcdf), ylim=c(0,1),
xlab="Value", ylab="Cumulative distribution function", las=1)
# connect mu with median
x0 <- min(xcdf)
x0 <- -2.8
pp <- c(alpha/2, 0.5, 1-alpha/2)
for (i in 1:length(pp)) {
p <- pp[i]
x <- qnorm(p, mean=mu, sd=sd)
y0 <- ifelse(i==3, 0.04, 0)
lines(c(x0, x,x), c(p,p,y0), col=mgray)
text(-3,p,sprintf("%.3f", p), cex=0.8, col=mgray)
if (i==3) text(x,0, sprintf("%.2f", x), cex=0.8, col=mgray)
xmid <- (x0+x)/2
arrows(xmid,p,xmid+0.01,p, col=mgray, length=0.1)
if (p<0.1) next # skip vertical arrows if there is no place
arrows(x,p/2,x,p/2-0.01, col=mgray, length=0.1)
}
# Foreground: CDF
lines(xcdf,ycdf, col=red, lwd=2)
text(mean(c(mu,hi)), yarr, sprintf("%.2f * s.d.", mul), pos=3)
rm(list=ls()) # Always start with a clean slate
library(rtrim)
red   <- "#E41A1C" # Set up some nice colors
blue  <- "#377EB8"
green <- "#4daf4a"
lgray <- gray(0.8)
mgray <- gray(0.5)
dgray <- gray(0.2)
mu    <- 5.0                            # mean
sd    <- 2.0                            # standard deviation
alpha <- 0.05                           # i.e., 95% confidence interval
# Full normal distribution
x <- seq(mu-3*sd, mu+3*sd, len=100)
y <- dnorm(x, mean=mu, sd=sd)
# Use quantile function to compute the confidence interval (CI)
lo <- qnorm(alpha/2,   mean=mu, sd=sd)  # lower CI bound
hi <- qnorm(1-alpha/2, mean=mu, sd=sd)  # upper CI bound
# start with an empty plot
plot(NULL,NULL, type='n', xlim=range(x), ylim=range(y),
xlab=NA, ylab="Probability density", las=1)
xci <- seq(lo, hi, len=100)             # background: confidence interval
yci <- dnorm(xci, mean=mu, sd=sd)
xx <- c(xci, rev(xci))
yy <- c(0*yci, rev(yci))
polygon(xx,yy,col=gray(0.9), border=NA)
lines(x,y, col=red, lwd=2)              # Foreground: complete distribution
# Annotation and decoration
lines(c(mu,mu), c(0,dnorm(mu,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mean
lines(c(mu-sd,mu-sd), c(0,dnorm(mu-sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu - s.d.
lines(c(mu+sd,mu+sd), c(0,dnorm(mu+sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu + s.d.
abline(h=0, lwd=0.5) # proper y=0 line
text(mean(x), mean(y), sprintf("%.0f%%", 100*(1-alpha)))
yarr <- 0.02                            # y-position of arrow
arrows(mu-sd,yarr, mu,yarr, code=3,length=0.12)
text(mu-sd/2, yarr, "s.d.", pos=3)
mul <- (hi-mu) / sd                     # sd -> CI multiplier
arrows(mu,yarr, hi,yarr, code=3, length=0.12)
text(mean(c(mu,hi)), yarr, sprintf("%.2f * s.d.", mul), pos=3)
rm(list=ls()) # Always start with a clean slate
library(rtrim)
red   <- "#E41A1C" # Set up some nice colors
blue  <- "#377EB8"
green <- "#4daf4a"
lgray <- gray(0.8)
mgray <- gray(0.5)
dgray <- gray(0.2)
mu    <- 5.0                            # mean
sd    <- 4.0                            # standard deviation
alpha <- 0.05                           # i.e., 95% confidence interval
# Full normal distribution
x <- seq(mu-3*sd, mu+3*sd, len=100)
y <- dnorm(x, mean=mu, sd=sd)
# Use quantile function to compute the confidence interval (CI)
lo <- qnorm(alpha/2,   mean=mu, sd=sd)  # lower CI bound
hi <- qnorm(1-alpha/2, mean=mu, sd=sd)  # upper CI bound
# start with an empty plot
plot(NULL,NULL, type='n', xlim=range(x), ylim=range(y),
xlab=NA, ylab="Probability density", las=1)
xci <- seq(lo, hi, len=100)             # background: confidence interval
yci <- dnorm(xci, mean=mu, sd=sd)
xx <- c(xci, rev(xci))
yy <- c(0*yci, rev(yci))
polygon(xx,yy,col=gray(0.9), border=NA)
lines(x,y, col=red, lwd=2)              # Foreground: complete distribution
# Annotation and decoration
lines(c(mu,mu), c(0,dnorm(mu,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mean
lines(c(mu-sd,mu-sd), c(0,dnorm(mu-sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu - s.d.
lines(c(mu+sd,mu+sd), c(0,dnorm(mu+sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu + s.d.
abline(h=0, lwd=0.5) # proper y=0 line
text(mean(x), mean(y), sprintf("%.0f%%", 100*(1-alpha)))
yarr <- 0.02                            # y-position of arrow
arrows(mu-sd,yarr, mu,yarr, code=3,length=0.12)
text(mu-sd/2, yarr, "s.d.", pos=3)
mul <- (hi-mu) / sd                     # sd -> CI multiplier
arrows(mu,yarr, hi,yarr, code=3, length=0.12)
text(mean(c(mu,hi)), yarr, sprintf("%.2f * s.d.", mul), pos=3)
rm(list=ls()) # Always start with a clean slate
library(rtrim)
red   <- "#E41A1C" # Set up some nice colors
blue  <- "#377EB8"
green <- "#4daf4a"
lgray <- gray(0.8)
mgray <- gray(0.5)
dgray <- gray(0.2)
mu    <- 5.0                            # mean
sd    <- 4.0                            # standard deviation
alpha <- 0.05                           # i.e., 95% confidence interval
# Full normal distribution
x <- seq(mu-3*sd, mu+3*sd, len=100)
y <- dnorm(x, mean=mu, sd=sd)
# Use quantile function to compute the confidence interval (CI)
lo <- qnorm(alpha/2,   mean=mu, sd=sd)  # lower CI bound
hi <- qnorm(1-alpha/2, mean=mu, sd=sd)  # upper CI bound
# start with an empty plot
plot(NULL,NULL, type='n', xlim=range(x), ylim=range(y),
xlab=NA, ylab="Probability density", las=1)
xci <- seq(lo, hi, len=100)             # background: confidence interval
yci <- dnorm(xci, mean=mu, sd=sd)
xx <- c(xci, rev(xci))
yy <- c(0*yci, rev(yci))
polygon(xx,yy,col=gray(0.9), border=NA)
lines(x,y, col=red, lwd=2)              # Foreground: complete distribution
# Annotation and decoration
lines(c(mu,mu), c(0,dnorm(mu,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mean
lines(c(mu-sd,mu-sd), c(0,dnorm(mu-sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu - s.d.
lines(c(mu+sd,mu+sd), c(0,dnorm(mu+sd,mean=mu,sd=sd)), lty="dashed", lwd=0.5) # mu + s.d.
abline(h=0, lwd=0.5) # proper y=0 line
text(mean(x), mean(y), sprintf("%.0f%%", 100*(1-alpha)))
yarr <- 0.02                            # y-position of arrow
arrows(mu-sd,yarr, mu,yarr, code=3,length=0.12)
text(mu-sd/2, yarr, "s.d.", pos=3)
mul <- (hi-mu) / sd                     # sd -> CI multiplier
arrows(mu,yarr, hi,yarr, code=3, length=0.12)
text(mean(c(mu,hi)), yarr, sprintf("%.2f * s.d.", mul), pos=3)
runApp('teach/stats/stats/normal')
# y <- runif(1000, -5, 5)
# df <- data.frame(PF = 10*rnorm(1000))
df <- data.frame(PF = y)
runApp('teach/stats/stats/normal')
