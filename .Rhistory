)
head(dfisotops)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
head(dfisotops)
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
colnames(dfisotops)
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
h,
n = 20,
lims = c(range(x), range(y), range(z)))
X
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(range(x), range(y), range(z)))
X
?misc3d::kde3d
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
X
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
library(misc3d)
library(MASS)
library(misc3d)
library(rgl)
library(oce)
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
title3d(xlab = "x", ylab = "y", zlab = "z")
title3d(xlab = "x", ylab = "y", zlab = "z")
library(misc3d)
library(MASS)
library(misc3d)
library(rgl)
library(oce)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
?title3d
library(MASS)
library(ks)
library(misc3d)
x <- dfisotops[ , c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")]
H.pi <- Hpi(x, pilot = "samse")
fhat <- kde(x, H = H.pi, compute.cont = TRUE)
plot(fhat, drawpoints = TRUE)
x <- rnorm(1000)
y <- 2 + x*rnorm(1000,1,.1) + rnorm(1000)
library(MASS)
den3d <- kde2d(x, y)
persp(den3d, box=FALSE)
shiny::runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
?Sys.getlocale
shiny::runApp('teachings/stats/stats/dim3')
?Sys.setlocale
schema(F)$traces$scatter$attributes$marker$symbol$values
class(schema(F)$traces$scatter$attributes$marker$symbol$values)
schema(F)$traces$scatter$attributes$marker$symbol$values
# Teaching app
# data with 3 dimensions
Sys.setlocale("LC_ALL", "C")
library(plotly)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
# dfisotops$X <- NULL
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfkmeans <- kmeans(x = dfisotops[, c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")],
centers = 3,
nstart = 20)
dfisotops$cluster <- dfkmeans$cluster
library(NbClust)
nbcenters.best <- NbClust(data = dfisotops[, c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")],
distance = "euclidean",
method = "ward.D2",
index = c("gap", "silhouette"))
nbcenters.best$Best.partition
nbcenters.best$Best.nc
nbcenters.best$Best.nc[1, "Gap"]
centers.best <- NbClust(data = dfisotops[, c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")],
distance = "euclidean",
method = "ward.D2",
index = c("gap", "silhouette"))
nb.centers.best <- centers.best$Best.nc[1, "Gap"]
library(shiny); runApp('teachings/stats/stats/dim3/app_2.R')
runApp('app_2.R')
runApp('teachings/stats/stats/dim3/app_2.R')
runApp('teachings/stats/stats/dim3/app_2.R')
runApp('teachings/stats/stats/dim3/app_2.R')
runApp('teachings/stats/stats/dim3/app_2.R')
runApp('teachings/stats/stats/dim3/app_2.R')
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
?kmeans
shiny::runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
OxfordP <- "C:/Rprojects/thomashuet/teachings/stats/UPV/images/art-pottery-oxford.jpg"
NewForP <- "C:/Rprojects/thomashuet/teachings/stats/UPV/images/art-pottery-newforest.jpg"
OxfordP.txt <- RCurl::base64Encode(readBin(OxfordP, "raw", file.info(OxfordP)[1, "size"]), "txt")
NewForP.txt <- RCurl::base64Encode(readBin(NewForP, "raw", file.info(NewForP)[1, "size"]), "txt")
library(shiny)
library(leaflet)
library(leaflet.minicharts)
library(plotly)
library(archdata)
library(dplyr)
library(DT)
library(reshape)
data(OxfordPots)
# rectify an error in the dataset
OxfordPots[OxfordPots$Place == "Gatcombe", "NewForestPct"] <- 0
## New Forest vs Oxford
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
## by transport
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
Oxford.lm.water <- lm(log(OxfordPct)~OxfordDst, Oxford.water)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
# lm.water.R2 <- round(summary(lm.water)$r.squared, 2)
r2.water <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)   # Save the predicted values
Oxford.water$residuals <- residuals(lm.water) # Save the residual values
water.values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"Observed: ", Oxford.water$OxfordPct)
water.residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"Observed: ", round(Oxford.water$predicted, 2))
# no water
Oxford.nowater <- subset(OxfordPots, WaterTrans == 0)
Oxford.lm.nowater <- lm(log(OxfordPct)~OxfordDst, Oxford.nowater)
lm.nowater <- lm(OxfordPct ~ OxfordDst, data = Oxford.nowater)
r2.nowater <- round(summary(lm.nowater)$r.squared, 2)
# lm.nowater.R2 <- round(summary(lm.nowater)$r.squared, 2)
Oxford.nowater$predicted <- predict(lm.nowater)   # Save the predicted values
Oxford.nowater$residuals <- residuals(lm.nowater) # Save the residual values
nowater.values <- paste0("<b>", Oxford.nowater$Place, "</b><br>",
"Observed: ", Oxford.nowater$OxfordPct)
nowater.residuals <- paste0("<b>", Oxford.nowater$Place, "</b><br>",
"Observed: ", round(Oxford.nowater$predicted, 2))
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
finePots <- merge(finePots, Place.coords, by = "Place")
df.both <- merge(OxfordPots, Place.coords, by = "Place")
df.nowater <- merge(Oxford.nowater, Place.coords, by = "Place")
df.water <- merge(Oxford.water, Place.coords, by = "Place")
colors <- c("green", "red")
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
print("edew")
t <- list(
family = "sans serif",
size = 14,
color = "blue")
xy.size <- 6
OxfordP <- "C:/Rprojects/thomashuet/teachings/stats/UPV/images/art-pottery-oxford.jpg"
NewForP <- "C:/Rprojects/thomashuet/teachings/stats/UPV/images/art-pottery-newforest.jpg"
OxfordP.txt <- RCurl::base64Encode(readBin(OxfordP, "raw", file.info(OxfordP)[1, "size"]), "txt")
NewForP.txt <- RCurl::base64Encode(readBin(NewForP, "raw", file.info(NewForP)[1, "size"]), "txt")
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
plot_ly(finePots, x = ~OxfordPct, y = ~NewForestPct, text = labels,
type = 'scatter', mode = 'markers')
plot_ly(finePots, x = ~OxfordPct, y = ~NewForestPct, text = labels,
type = 'scatter', mode = 'markers') %>%
add_text(textfont = t, textposition = 'middle right') %>%
layout(title = paste0('Ratio Oxford pottery/New Forest pottery for ', nrow(finePots),
' Late Roman sites'),
xaxis = list(title = "% Oxford pottery", showgrid = FALSE),
yaxis = list(title = "% New Forest pottery", showgrid = FALSE),
margin = m,
images = list(
list(
source =  paste('data:image/jpg;base64', NewForP.txt, sep=','),
xref = "x",
yref = "y",
x = 15,
y = 18,
sizex = xy.size,
sizey = xy.size,
# sizing = "stretch",
opacity = 1,
layer = "below"
),
list(
source =  paste('data:image/jpg;base64', OxfordP.txt, sep=','),
xref = "x",
yref = "y",
x = 18,
y = 9,
sizex = xy.size,
sizey = xy.size,
# sizing = "stretch",
opacity = 1,
layer = "below"
)
)
)
fig <- plot_ly(finePots, x = ~OxfordPct, y = ~NewForestPct, text = labels,
type = 'scatter', mode = 'markers') %>%
add_text(textfont = t, textposition = 'middle right') %>%
layout(title = paste0('Ratio Oxford pottery/New Forest pottery for ', nrow(finePots),
' Late Roman sites'),
xaxis = list(title = "% Oxford pottery", showgrid = FALSE),
yaxis = list(title = "% New Forest pottery", showgrid = FALSE),
margin = m,
images = list(
list(
source =  paste('data:image/jpg;base64', NewForP.txt, sep=','),
xref = "x",
yref = "y",
x = 15,
y = 18,
sizex = xy.size,
sizey = xy.size,
# sizing = "stretch",
opacity = 1,
layer = "below"
),
list(
source =  paste('data:image/jpg;base64', OxfordP.txt, sep=','),
xref = "x",
yref = "y",
x = 18,
y = 9,
sizex = xy.size,
sizey = xy.size,
# sizing = "stretch",
opacity = 1,
layer = "below"
)
)
)
fig
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map/app_1.R')
Place.coords
runApp('teachings/stats/stats/dim2-map/app_1.R')
runApp('teachings/stats/stats/dim2-map/app_1.R')
runApp('teachings/stats/stats/dim2-map/app_1.R')
head(finePots)
runApp('teachings/stats/stats/dim2-map/app_1.R')
runApp('teachings/stats/stats/dim2-map/app_1.R')
## Introduction
knitr::kable(cars)
dt <- mtcars[1:5, 1:6]
library(kableExtra)
dt <- mtcars[1:5, 1:6]
dt %>%
kbl() %>%
kable_paper("hover", full_width = F)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
dt %>%
kbl() %>%
kable_paper("hover", full_width = F, font_size=12)
library(dplyr)
library(leaflet)
munsingen.long <- 7.569587484129203
munsingen.lat <- 46.864709895956004
leaflet(width = "60%", height = "400px") %>%
addTiles(group = 'OSM') %>%
addControl("Munsingen necropolis", position = "bottomright") %>%
addProviderTiles(providers$Esri.WorldImagery, group='Esri.WorldImagery') %>%
addMarkers(munsingen.long,
munsingen.lat,
label = "Munsingen necropolis") %>%
addLayersControl(
baseGroups = c('OSM', 'Esri.WorldImagery')) %>%
addScaleBar(position = "bottomleft")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text") %>%
layout(title = "Munsingen fibulae")
library(rgl)
options(rgl.useNULL = TRUE) # avoid the popup RGL device
nb.samp <- 12
# 12 graves with the numerous fibulae
Fibulae.nbGrave <- Fibulae %>%
count(Grave) %>%
arrange(-n) %>%
slice_head(n = nb.samp)
Fibulae.samp <- Fibulae[Fibulae$Grave %in% Fibulae.nbGrave$Grave, ]
# rainbow colors by graves
Fibulae.samp$color <- rainbow(nb.samp)[as.numeric(as.factor(Fibulae.samp$Grave))]
plot3d(
x = Fibulae$Length,
y = Fibulae$FA,
z = Fibulae$BH,
col = Fibulae.samp$color,
type = 's',
xlab = "Length",
ylab  ="Foot Angle",
zlab = "Bow Height")
rglwidget()
knitr::include_graphics("www/munsingen_fib_measures.png"){width="200px"}
knitr::include_graphics("www/munsingen_fib_measures.png")
knitr::include_graphics("www/munsingen_fib_measures.png")
## Cross-referencing
1 +1
![](www/munsingen_fib_measures.png){width=200}
![](www/munsingen_fib_measures.png){width=200}
#| out-width: "20%"
knitr::include_graphics("www/munsingen_fib_measures.png")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text") %>%
layout(title = "Munsingen fibulae")
?archdata
knitr::opts_chunk$set(fig.pos = "H")
knitr::opts_chunk$set(warning = FALSE)
library(archdata)
data(Fibulae)
Fibulae
View(Fibulae)
View(Fibulae.nbGrave)
View(Fibulae.ex)
View(Fibulae)
View(Fibulae)
?`archdata-package`
?Fibulae
library(quarto)
library(dplyr)
library(leaflet)
munsingen.long <- 7.569587484129203
munsingen.lat <- 46.864709895956004
leaflet(width = "90%", height = "300px") %>%
addTiles(group = 'OSM') %>%
addControl("Munsingen necropolis", position = "bottomright") %>%
addProviderTiles(providers$Esri.WorldImagery, group='Esri.WorldImagery') %>%
addMarkers(munsingen.long,
munsingen.lat,
label = "Munsingen necropolis") %>%
addLayersControl(
baseGroups = c('OSM', 'Esri.WorldImagery')) %>%
addScaleBar(position = "bottomleft")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text")
