y = catC$y,
pch = 16, cex = 1, col = "blue")
ctr <- ppp(df$x, df$y, w)
text(ctr, labels = rownames(df), cex = .7, pos = .5)
# d <- nndist(df$x, df$y)
text(ctr, labels = rownames(df), cex = .7, pos = 1)
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
dist.to.mean
class(dist.to.mean)
dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
View(dist.to.mean)
rownames(dist.to.mean) <- rownames(df)
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
rownames(dist.to.mean) <- rownames(df)
colnames(dist.to.mean) <- "dist.to.mean"
df$dist.to.mean <- as.factor(dist.to.mean[ , 1])
kruskalmc(df$dist.to.mean, df$feat)
library(pgirmess)
?pairwise.wilcox.test
pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
df$dist.to.mea
df$dist.to.mean <- dist.to.mean[ , 1]
pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km <- pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km$p.value
nb.pts <- 4
margins <- .5
catA <- data.frame(x = mean(x1)+runif(nb.pts, 0, .5),
y = mean(x1)+runif(nb.pts, 0, .5),
feat = rep("A", nb.pts),
row.names = paste0(rep("A", nb.pts),".",seq(1,nb.pts)))
catB <- data.frame(x = mean(x1)+runif(nb.pts, 0, 2),
y = mean(x1)+runif(nb.pts, 0, 2),
feat = rep("B", nb.pts),
row.names = paste0(rep("B", nb.pts),".",seq(1,nb.pts)))
catC <- data.frame(x = mean(x1)+runif(nb.pts, 0, 5),
y = mean(x1)+runif(nb.pts, 0, 5),
feat = rep("C", nb.pts),
row.names = paste0(rep("C", nb.pts),".",seq(1,nb.pts)))
df <- rbind(catA, catB, catC)
w <- as.owin(c(min(df$x) - margins, max(df$x) + margins,
min(df$y) - margins, max(df$y) + margins))
plot(w, lwd = 3, main = "")
points(x = mean(df$x),
y = mean(df$y),
pch = 16, cex = 2, col = "black")
points(x = catA$x,
y = catA$y,
pch = 16, cex = 1, col = "red")
points(x = catB$x,
y = catB$y,
pch = 16, cex = 1, col = "green")
points(x = catC$x,
y = catC$y,
pch = 16, cex = 1, col = "blue")
ctr <- ppp(df$x, df$y, w)
text(ctr, labels = rownames(df), cex = .7, pos = 1)
# distances to the mean
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
# dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
# rownames(dist.to.mean) <- rownames(df)
# colnames(dist.to.mean) <- "dist.to.mean"
df$dist.to.mean <- dist.to.mean[ , 1]
km <- pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km$p.value
nb.pts <- 4
margins <- .5
catA <- data.frame(x = mean(x1)+runif(nb.pts, 0, 1),
y = mean(x1)+runif(nb.pts, 0, 1),
feat = rep("A", nb.pts),
row.names = paste0(rep("A", nb.pts),".",seq(1,nb.pts)))
catB <- data.frame(x = mean(x1)+runif(nb.pts, 0, 3),
y = mean(x1)+runif(nb.pts, 0, 3),
feat = rep("B", nb.pts),
row.names = paste0(rep("B", nb.pts),".",seq(1,nb.pts)))
catC <- data.frame(x = mean(x1)+runif(nb.pts, 1, 5),
y = mean(x1)+runif(nb.pts, 1, 5),
feat = rep("C", nb.pts),
row.names = paste0(rep("C", nb.pts),".",seq(1,nb.pts)))
catC <- data.frame(x = mean(x1)+runif(nb.pts, 3, 5),
y = mean(x1)+runif(nb.pts, 3, 5),
feat = rep("D", nb.pts),
row.names = paste0(rep("D", nb.pts),".",seq(1,nb.pts)))
df <- rbind(catA, catB, catC, catD)
w <- as.owin(c(min(df$x) - margins, max(df$x) + margins,
min(df$y) - margins, max(df$y) + margins))
plot(w, lwd = 3, main = "")
points(x = mean(df$x),
y = mean(df$y),
pch = 16, cex = 2, col = "black")
points(x = catA$x,
y = catA$y,
pch = 16, cex = 1, col = "red")
points(x = catB$x,
y = catB$y,
pch = 16, cex = 1, col = "green")
points(x = catC$x,
y = catC$y,
pch = 16, cex = 1, col = "blue")
points(x = catD$x,
y = catD$y,
pch = 16, cex = 1, col = "purple")
ctr <- ppp(df$x, df$y, w)
text(ctr, labels = rownames(df), cex = .7, pos = 1)
# distances to the mean
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
# dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
# rownames(dist.to.mean) <- rownames(df)
# colnames(dist.to.mean) <- "dist.to.mean"
df$dist.to.mean <- dist.to.mean[ , 1]
km <- pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km$p.value
nb.pts <- 4
margins <- .5
catA <- data.frame(x = mean(x1)+runif(nb.pts, 0, 1),
y = mean(x1)+runif(nb.pts, 0, 1),
feat = rep("A", nb.pts),
row.names = paste0(rep("A", nb.pts),".",seq(1,nb.pts)))
catB <- data.frame(x = mean(x1)+runif(nb.pts, 0, 3),
y = mean(x1)+runif(nb.pts, 0, 3),
feat = rep("B", nb.pts),
row.names = paste0(rep("B", nb.pts),".",seq(1,nb.pts)))
catC <- data.frame(x = mean(x1)+runif(nb.pts, 1, 5),
y = mean(x1)+runif(nb.pts, 1, 5),
feat = rep("C", nb.pts),
row.names = paste0(rep("C", nb.pts),".",seq(1,nb.pts)))
catD <- data.frame(x = mean(x1)+runif(nb.pts, 3, 5),
y = mean(x1)+runif(nb.pts, 3, 5),
feat = rep("D", nb.pts),
row.names = paste0(rep("D", nb.pts),".",seq(1,nb.pts)))
df <- rbind(catA, catB, catC, catD)
w <- as.owin(c(min(df$x) - margins, max(df$x) + margins,
min(df$y) - margins, max(df$y) + margins))
plot(w, lwd = 3, main = "")
points(x = mean(df$x),
y = mean(df$y),
pch = 16, cex = 2, col = "black")
points(x = catA$x,
y = catA$y,
pch = 16, cex = 1, col = "red")
points(x = catB$x,
y = catB$y,
pch = 16, cex = 1, col = "green")
points(x = catC$x,
y = catC$y,
pch = 16, cex = 1, col = "blue")
points(x = catD$x,
y = catD$y,
pch = 16, cex = 1, col = "purple")
ctr <- ppp(df$x, df$y, w)
text(ctr, labels = rownames(df), cex = .7, pos = 1)
# distances to the mean
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
# dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
# rownames(dist.to.mean) <- rownames(df)
# colnames(dist.to.mean) <- "dist.to.mean"
df$dist.to.mean <- dist.to.mean[ , 1]
km <- pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km$p.value
nb.pts <- 4
margins <- .5
catA <- data.frame(x = mean(x1)+runif(nb.pts, 0, 1),
y = mean(x1)+runif(nb.pts, 0, 1),
feat = rep("A", nb.pts),
row.names = paste0(rep("A", nb.pts),".",seq(1,nb.pts)))
catB <- data.frame(x = mean(x1)+runif(nb.pts, 0, 3),
y = mean(x1)+runif(nb.pts, 0, 3),
feat = rep("B", nb.pts),
row.names = paste0(rep("B", nb.pts),".",seq(1,nb.pts)))
catC <- data.frame(x = mean(x1)+runif(nb.pts, 1, 5),
y = mean(x1)+runif(nb.pts, 1, 5),
feat = rep("C", nb.pts),
row.names = paste0(rep("C", nb.pts),".",seq(1,nb.pts)))
catD <- data.frame(x = mean(x1)+runif(nb.pts, 3, 5),
y = mean(x1)+runif(nb.pts, 3, 5),
feat = rep("D", nb.pts),
row.names = paste0(rep("D", nb.pts),".",seq(1,nb.pts)))
df <- rbind(catA, catB, catC, catD)
w <- as.owin(c(min(df$x) - margins, max(df$x) + margins,
min(df$y) - margins, max(df$y) + margins))
plot(w, lwd = 3, main = "")
points(x = mean(df$x),
y = mean(df$y),
pch = 16, cex = 2, col = "black")
points(x = catA$x,
y = catA$y,
pch = 16, cex = 1, col = "red")
points(x = catB$x,
y = catB$y,
pch = 16, cex = 1, col = "green")
points(x = catC$x,
y = catC$y,
pch = 16, cex = 1, col = "blue")
points(x = catD$x,
y = catD$y,
pch = 16, cex = 1, col = "pink")
ctr <- ppp(df$x, df$y, w)
text(ctr, labels = rownames(df), cex = .6, pos = 1)
# distances to the mean
dist.to.mean <- crossdist(df$x, df$y,
rep(mean(df$x), nrow(df)),
rep(mean(df$x), nrow(df)))
# dist.to.mean <- as.data.frame(dist.to.mean[ , 1])
# rownames(dist.to.mean) <- rownames(df)
# colnames(dist.to.mean) <- "dist.to.mean"
df$dist.to.mean <- dist.to.mean[ , 1]
km <- pairwise.wilcox.test(df$dist.to.mean, df$feat,
p.adjust.method = "BH")
km$p.value
runApp('teachings/stats/_stats/spat-nearest')
runApp('teachings/stats/_stats/spat-nearest')
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
source("C:/Rprojects/thomashuet/teachings/stats/_stats/dim2-map/app.R")
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
# Teaching app
# data with 2 dimensions
library(plotly)
library(archdata)
library(leaflet)
data(OxfordPots)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("OSM", "Ortho"),
position = "topright") %>%
addScaleBar(position = "bottomright")
shiny::runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
