OxfordPots
data("OxfordPots")
OxfordPots
data("OxfordPots")
data("OxfordPots")
?lm
OxfordPots$OxfordPct
log(OxfordPots$OxfordPct)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water.transport <- subset(OxfordPots, WaterTrans == 1)
Oxford.water.transport.no <- subset(OxfordPots, WaterTrans == 0)
View(Oxford.water.transport.no)
View(Oxford.water.transport)
View(Oxford.water.transport.no)
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water.transport <- subset(OxfordPots, WaterTrans == 1)
Oxford.water.transport.no <- subset(OxfordPots, WaterTrans == 0)
plot(x = Oxford.water.transport$OxfordDst,
y = Oxford.water.transport$OxfordPct.log,
xlim = c(0, max(Oxford.water.transport$OxfordDst)),
ylim = c(0, max(Oxford.water.transport$OxfordPct.log)),
pch = 16,
xlab = "Distance from Oxford kilns (miles)",
ylab = "Percentage of Oxford pottery (Logarithmic scale)")
plot(x = Oxford.water.transport$OxfordDst,
y = Oxford.water.transport$OxfordPct.log,
xlim = c(0, max(Oxford.water.transport$OxfordDst)),
ylim = c(0, max(Oxford.water.transport$OxfordPct.log)),
pch = 16,
xlab = "Distance from Oxford kilns (miles)",
ylab = "Percentage of Oxford pottery (Logarithmic scale)")
detach("package:archdata", unload = TRUE)
library(archdata)
detach("package:archdata", unload = TRUE)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water.transport <- subset(OxfordPots, WaterTrans == 1)
Oxford.water.transport.no <- subset(OxfordPots, WaterTrans == 0)
plot(x = Oxford.water.transport$OxfordDst,
y = Oxford.water.transport$OxfordPct.log,
xlim = c(0, max(Oxford.water.transport$OxfordDst)),
ylim = c(0, max(Oxford.water.transport$OxfordPct.log)),
pch = 16,
xlab = "Distance from Oxford kilns (miles)",
ylab = "Percentage of Oxford pottery (Logarithmic scale)")
points(x = Oxford.water.transport.no$OxfordDst,
y = Oxford.water.transport.no$OxfordPct.log)
abline(lm(OxfordPct.log ~ OxfordDst, data = Oxford.water.transport))
abline(lm(OxfordPct.log ~ OxfordDst, data = Oxford.water.transport.no))
xlim = c(0, max(Oxford.water.transport$OxfordDst)),
NA == TRUE
plot(x = Oxford.water.transport$OxfordDst, y = Oxford.water.transport$OxfordPct.log, xlim = c(0, max(Oxford.water.transport$OxfordDst)),
ylim = c(0, max(Oxford.water.transport$OxfordPct.log)),
pch = 16,
xlab = "Distance from Oxford kilns (miles)",
ylab = "Percentage of Oxford pottery (Logarithmic scale)")
library(eamenaR)
geojson_stat(stat.name = "geojson_fields", stat = "list_ids")
install.packages(archdata)
library(archdata)
library(eamenaR)
geojson_map(map.name = "caravanserail_plotly",
interactive = T,
export.plot = T,
dirOut = "C:/Rprojects/eamenaR/results/")
library(dplyr)
geojson_map(map.name = "caravanserail_plotly",
interactive = T,
export.plot = T,
dirOut = "C:/Rprojects/eamenaR/results/")
read.csv2("https://github.com/eamena-project/eamenaR/blob/main/inst/extdata/ids.csv")
read.csv2("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
ids <- read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
kable(ids) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 20) %>%
ids <- read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
kable(ids) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 20)
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(plotly)
library(archdata)
library(ggplot2)
library(DT)
library(dplyr)
library(eamenaR)
ids <- read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
kable(ids) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 20)
library(shiny)
library(rmarkdown)
library(plotly)
library(ggtern)
library(plotly)
library(DT)
library(dplyr)
library(archdata)
library(kableExtra)
library(FactoMineR)
library(archdata)
library(reshape2)
library(eamenaR)
d <- hash::hash()
d <- ref_are_duplicates(d = d,
c("EAMENA-0207209", "EAMENA-0182057"),
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry"),
verbose = F)
d$are_duplicates
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson <- ea.geojson[ea.geojson[[ids]] %in% hp.list, selected.fields]
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry")
hp.list = c("EAMENA-0207209", "EAMENA-0182057")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson <- ea.geojson[ea.geojson[[ids]] %in% hp.list, selected.fields]
ea.geojson
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
head(ea.geojson, 1)
Names <- c("سليم", "سعيد", "مجدى")
Names
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry")
hp.list = c("EAMENA-0207209", "EAMENA-0182057")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson <- ea.geojson[ea.geojson[[ids]] %in% hp.list, selected.fields]
ea.geojson
library(shiny)
library(rmarkdown)
library(plotly)
library(ggtern)
library(plotly)
library(DT)
library(dplyr)
library(archdata)
library(kableExtra)
library(FactoMineR)
library(archdata)
library(reshape2)
library(eamenaR)
library(geojson_sf)
library(geojsonsf)
?geojson_sf
ar.unicode <- "<U+06A9>"
ar.unicode
library(stringi)
ar.unicode <- "<U+06A9>"
cat(stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", ar.unicode)))
ea.geojson$`Resource Name`
cat(stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", ea.geojson$`Resource Name`)))
?stri_unescape_unicode
#| echo: false
# options(encoding = 'UTF-8')
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry")
hp.list = c("EAMENA-0207209", "EAMENA-0182057")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson[["Resource Name"]] <- cat(stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1",
ea.geojson[["Resource Name"]])))
ea.geojson <- ea.geojson[ea.geojson[[ids]] %in% hp.list, selected.fields]
?gsub
#| echo: false
# options(encoding = 'UTF-8')
selected.fields = c("Assessment Investigator - Actor",
"Assessment Activity Date",
"Resource Name",
"geometry")
hp.list = c("EAMENA-0207209", "EAMENA-0182057")
geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson")
ids <- eamenaR::ref_ids(concept.name = "hp.id")
selected.fields <- c(ids, selected.fields, "resourceid")
ea.geojson <- geojsonsf::geojson_sf(geojson.path)
ea.geojson[["Resource Name"]] <- stringi::stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1",
ea.geojson[["Resource Name"]]))
ea.geojson <- ea.geojson[ea.geojson[[ids]] %in% hp.list, selected.fields]
# ar <- c("سليم", "سعيد", "مجدى")
# ar.unicode <- "<U+06A9>"
# cat(stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", ea.geojson[["Resource Name"]])))
ea.geojson
ea.geojson[["Resource Name"]]
gp <- df.measure.type %>%
plotly::group_by(by) %>%
# do(p = plot_ly(., x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type = "scatter")) %>%
plotly::do(p = plotly::plot_ly(.,
y = ~value,
type = "box",
boxpoints = "all",
color = ~lbl.by,
jitter = 0.5,
pointpos = -1.8,
hoverinfo = 'text',
hovertext = ~id)
) %>%
plotly::subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
gp
gp <- iris %>%
plotly::group_by(by) %>%
# do(p = plot_ly(., x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type = "scatter")) %>%
plotly::do(p = plotly::plot_ly(.,
y = ~value,
type = "box",
boxpoints = "all",
color = ~lbl.by,
jitter = 0.5,
pointpos = -1.8,
hoverinfo = 'text',
hovertext = ~id)
) %>%
plotly::subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
gp
gp <- iris %>%
plotly::group_by(Species) %>%
# do(p = plot_ly(., x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type = "scatter")) %>%
plotly::do(p = plotly::plot_ly(.,
y = ~value,
type = "box",
boxpoints = "all",
color = ~lbl.by,
jitter = 0.5,
pointpos = -1.8,
hoverinfo = 'text',
hovertext = ~id)
) %>%
plotly::subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
gp
remove.packages("discourseGT", lib="~/R/win-library/4.1")
install.packages("discourseGT")
?devtools::test
devtools::test(pkg = "discourseGT")
devtools::test(pkg = system.file('extdata', package = 'discourseGT'))
system.file('extdata', package = 'discourseGT')
system.file(package = 'discourseGT')
devtools::test(pkg = system.file(package = 'discourseGT'))
devtools::test(pkg = system.file(package = 'discourseGT'))
system.file(package = 'discourseGT')
library(testthat)
library(discourseGT)
test_check("discourseGT")
getwd()
setwd("C:/Users/Thomas Huet/Documents/R/win-library/4.1/discourseGT")
getwd()
library(testthat)
library(discourseGT)
test_check("discourseGT")
devtools::test()
remove.packages("discourseGT", lib="~/R/win-library/4.1")
install.packages("discourseGT")
library(discourseGT)
df.shad <- "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv"
dfisotops <- read.csv2(df.shad, sep = ";") # GH
dfisotops
dfisotops <- read.csv2(df.iso, sep = ";", row.names = T)
df.iso <- "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv"
dfisotops <- read.csv2(df.iso, sep = ";", row.names = T)
dfisotops <- read.csv2(df.iso, sep = ";")
dfisotops
dfisotops <- read.csv2(df.iso, sep = ";", row.names = T)
dfisotops <- read.table(df.iso, sep = ";", row.names = T)
dfisotops <- read.table(df.iso, sep = ";", row.names = 1)
dfisotops
dfisotops <- read.table(df.iso, sep = ";", row.names = 1, col.names = T)
dfisotops <- read.table(df.iso, sep = ";", row.names = 1, col.names = 1)
dfisotops <- read.table(df.iso, sep = ";")
rownames(dfisotops) <- dfisotops[,1]
dfisotops[,1] <- NULL
dfisotops
dfisotops <- read.csv2(df.iso, sep = ";")
rownames(dfisotops) <- dfisotops[,1]
dfisotops[,1] <- NULL
dfisotops
colnames(dfisotops)
cols <- colnames(dfisotops[1:14])
cols
dfkmeans <- kmeans(x = dfisotops[, cols],
centers = 3,
nstart = 20)
dfisotops$cluster <- dfkmeans$cluster
iti <- F
shiny::runApp('teach/stats/stats/dim3')
runApp('teach/stats/stats/dim3')
shiny::runApp('teach/stats/stats/dim3')
Teaching app
# data with 3 dimensions
Sys.setlocale("LC_ALL", "C")
library(plotly)
# library(NbClust)
iti <- F
if(iti){
# Itineris dataset
df.iso <- "https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim3/dfisotops.csv"
dfisotops <- read.csv2(df.iso, sep = ";") # GH
cols <- c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")
} else {
# Shadreck dataset
df.iso <- "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv"
dfisotops <- read.csv2(df.iso, sep = ";")
rownames(dfisotops) <- dfisotops[,1]
dfisotops[,1] <- NULL
cols <- colnames(dfisotops[1:14])
}
# dfisotops <- read.csv2(df.iso, sep = ";") # GH
# dfisotops$X <- NULL
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
# centers.best <- NbClust(data = dfisotops[, c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")],
#                           distance = "euclidean",
#                           method = "ward.D2",
#                           index = c("gap", "silhouette"))
# nb.centers.best <- centers.best$Best.nc[1, "Gap"]
dfkmeans <- kmeans(x = dfisotops[, cols],
centers = 3,
nstart = 20)
dfisotops$cluster <- dfkmeans$cluster
#TODO: pass this assignations to itineRis 'symbol' calculation
dfisotops$symbol <- NULL
symbols.default <- c('circle', 'square', 'triangle', 'diamond', 'star', 'cross')
objects.used <- as.character(unique(dfisotops$object))
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(object = objects.used,
symbol = symbols.used)
symbols.used
objects.used
dfkmeans <- kmeans(x = dfisotops[, cols],
centers = 3,
nstart = 20)
dfisotops$cluster <- dfkmeans$cluster
dfkmeans
dfisotops
iti <- T
if(iti){
# Itineris dataset
df.iso <- "https://raw.githubusercontent.com/zoometh/thomashuet/main/teach/stats/stats/dim3/dfisotops.csv"
dfisotops <- read.csv2(df.iso, sep = ";") # GH
cols <- c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")
} else {
# Shadreck dataset
df.iso <- "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv"
dfisotops <- read.csv2(df.iso, sep = ";")
rownames(dfisotops) <- dfisotops[,1]
dfisotops[,1] <- NULL
cols <- colnames(dfisotops[1:14])
}
# dfisotops <- read.csv2(df.iso, sep = ";") # GH
# dfisotops$X <- NULL
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
# centers.best <- NbClust(data = dfisotops[, c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")],
#                           distance = "euclidean",
#                           method = "ward.D2",
#                           index = c("gap", "silhouette"))
# nb.centers.best <- centers.best$Best.nc[1, "Gap"]
dfkmeans <- kmeans(x = dfisotops[, cols],
centers = 3,
nstart = 20)
dfisotops$cluster <- dfkmeans$cluster
#TODO: pass this assignations to itineRis 'symbol' calculation
dfisotops$symbol <- NULL
symbols.default <- c('circle', 'square', 'triangle', 'diamond', 'star', 'cross')
objects.used <- as.character(unique(dfisotops$object))
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.used
objects.used
symbols.used
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data')
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data')
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data')
remove.packages("rsconnect", lib="~/R/win-library/4.1")
install.packages("rsconnect")
library(shiny); runApp('C:/Users/Thomas Huet/Desktop/Shadreck data/(archives)/app_1.R')
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data/(archives)/app_1.R')
#' Read the thesaurus of authoritative labels for chemistry variables
#'
#' @name isotop_thesaurus
#'
#' @description Read the thesaurus of isotopes, elements, ... Add values and column names into a list that can be compared to input dataset.
#'
#' @param path.thes the path to the thesaurus file.
#' @param as.list if TRUE (Default: FALSE) return all values, and colnames, as a vector. If FALSE, return the thesaurus as a dataframe.
#' @param verbose if TRUE, print messages
#'
#' @return A vector of values
#'
#' @examples
#'
#' # Return the thesaurus as a vector of values
#' thes <- isotop_thesaurus(as.list = T)
#'
#' @export
isotop_thesaurus <- function(path.thes = "https://raw.githubusercontent.com/zoometh/itineRis/main/inst/extdata/isotops_thesaurus.csv",
as.list = FALSE,
verbose = TRUE){
if(verbose){print("Read the thesaurus")}
thes.isotop <- read.csv2(path.thes, sep = ",")
if(as.list){
all.values <- as.vector(as.matrix(thes.isotop))
sel.values <- all.values[!all.values %in% '']
val.values <- c(sel.values, colnames(thes.isotop))
if(verbose){print("Thesaurus returned as list")}
return(val.values)
} else {
if(verbose){print("Thesaurus returned")}
return(thes.isotop)
}
}
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data/(archives)/app_1.R')
runApp('C:/Users/Thomas Huet/Desktop/Shadreck data')
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
setInternet2(TRUE)
library(shiny); runApp('teach/stats/ox/ex1.R')
install.packages("shinyjs")
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
install.packages("shinyAce")
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
?aceEditor
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex1.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
RCODE <- "df <- data.frame(
num=1:4,
let=LETTERS[2:5],
rand=rnorm(4)
)
df
"
RCODE
library(shiny); runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
RCODE
RCODE <- "df <- data.frame(
num=1:4,
let=LETTERS[2:5],
rand=rnorm(4)
)
df
"
RCODE
stringr::str_count(RCODE, "\\n")
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/ox/ex2.R')
runApp('teach/stats/stats/f-sum.R')
runApp('teach/stats/stats/f-sum/index.R')
rsconnect::deployApp()
rsconnect::deployApp(appName="f-sum")
rsconnect::setAccountInfo(name='trainingidn', token='E14F6D3BBFD65289459997605F4D6582', secret='UYzvcALfK6R2gfxhL4+0P6UayUULcal2rhAV3AE7')
rsconnect::deployApp(appName="f-sum")
rsconnect::setAccountInfo(name='trainingidn', token='E14F6D3BBFD65289459997605F4D6582', secret='UYzvcALfK6R2gfxhL4+0P6UayUULcal2rhAV3AE7')
rsconnect::deployApp(appName="f-sum")
rsconnect::deployApp(appName="f-sum", appPrimaryDoc='./teach/stats/f-sum/index.R')
setwd("C:/Rprojects/thomashuet/teach/stats/stats/f-sum")
rsconnect::deployApp(appName="f-sum")
rsconnect::setAccountInfo(name='trainingidn', token='E14F6D3BBFD65289459997605F4D6582', secret='UYzvcALfK6R2gfxhL4+0P6UayUULcal2rhAV3AE7')
rsconnect::deployApp(appName="f-sum")
library(shiny); runApp('index.R')
runApp('index.R')
runApp('app.R')
runApp()
?aceEditor
