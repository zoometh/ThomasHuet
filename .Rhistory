runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim2')
data(OxfordPots)
View(OxfordPots)
runApp('teachings/stats/_stats/dim2')
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
Oxford.lm.water <- lm(log(OxfordPct)~OxfordDst, Oxford.water)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
lm.water.R2 <- round(summary(lm.water)$r.squared, 2)
# no water
Oxford.nowater <- subset(OxfordPots, WaterTrans == 0)
Oxford.lm.nowater <- lm(log(OxfordPct)~OxfordDst, Oxford.nowater)
lm.nowater <- lm(OxfordPct ~ OxfordDst, data = Oxford.nowater)
lm.nowater.R2 <- round(summary(lm.nowater)$r.squared, 2)
Oxford.nowater$predicted <- predict(lm.nowater)   # Save the predicted values
Oxford.nowater$residuals <- residuals(lm.nowater) # Save the residual values
Oxford.nowater
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
shiny::runApp('teachings/stats/_stats/dim2')
data(OxfordPots)
View(OxfordPots)
runApp('teachings/stats/_stats/dim2')
?tooltip
library(plotly)
?tooltip
?ggplotly
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = + 0.1,
x = 0.5))
#| echo: true
#| warning: false
# Radiocarbon probability densities
library(rcarbon)
dirIn <- "https://raw.githubusercontent.com/zoometh/neonet/main/inst/extdata/"
fileIn <- "140_140_id00140_doc_elencoc14.tsv"
dataIn <- paste0(dirIn, fileIn)
C14 <- read.csv2(dataIn, sep = "\t")
C14cal <- calibrate(x = C14[1, "C14Age"],
errors = C14[1, "C14SD"],
calCurves = 'intcal20')
C14cal$grids
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
sites <- rownames(df)
ggtern(data = df, aes(x = where, y = when, z = what, col = sites)) +
theme_bw() +
geom_point(alpha = 0.5, size = 17) +
geom_point(size = 1, color = "black") +
theme_showarrows() +
theme(legend.position="none")
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
library(dplyr)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
library(DT)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
?datatable
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
searching = FALSE,
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
options = list(searching = FALSE),
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
options = list(searching = FALSE,
lengthChange = FALSE),
filter = "none") %>%
formatStyle(
"feat",
fontSize = '20%',
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
shiny::runApp('teachings/stats/_stats/pointbasic')
runApp('teachings/stats/_stats/gmm')
runApp('teachings/stats/_stats/gmm')
runApp('teachings/stats/_stats/dim3')
runApp('teachings/stats/_stats/dim3')
runApp('teachings/stats/_stats/dim3')
runApp('teachings/stats/_stats/seriation')
library(shiny)
library(DT)
library(seriation)
library(ca)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
datas <- datatable(seriat)
datas
runApp('teachings/stats/_stats/seriation')
runApp('teachings/stats/_stats/seriation')
runApp('teachings/stats/_stats/seriation')
library(archdata)
data(OxfordPots)
cat(OxfordPots$Place, sep = "\n")
cat(OxfordPots$Place, sep = "\n", collapse=""")
cat(OxfordPots$Place, sep = "\n", collapse=""")
cat(OxfordPots$Place, sep = "\n")
print(cat(OxfordPots$Place, sep = "\n"))
Place.coords <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
openxlsx::read.xlsx(Place.coords, 2)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 2)
head9Place.coords
head(Place.coords)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 2)
head9Place.coords
head(Place.coords)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 2)
Place.coords <- Place.coords[ , c("Place", "y", "x")]
angle2dec <- function(angle) {
angle <- as.character(angle)
x <- do.call(rbind, strsplit(angle, split=' '))
x <- apply(x, 1L, function(y) {
y <- as.numeric(y)
y[1] + y[2]/60 + y[3]/3600
})
return(x)
}
new_df <- apply(Place.coords, 2L, angle2dec)
new_df
new_df[ c(2,3)]
new_df[, c(2,3)]
cat(new_df[, c(2,3)])
cat(new_df[, c(2,3)], sep = "\n")
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 2)
Place.coords <- Place.coords[ , c("Place", "YY", "XX")]
Place.coords
library(leaflet)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 2)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = "Place",
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
library(leaflet)
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = "Place",
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
Place.coords.path <- "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordpots_data.xlsx"
Place.coords <- openxlsx::read.xlsx(Place.coords.path, 1)
Place.coords <- Place.coords[ , c("Place", "lon", "lat")]
Place.coords[, c("lon", "lat")] <- sapply(Place.coords[, c("lon", "lat")], as.numeric)
leaflet(Place.coords) %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addCircleMarkers(
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 5,
popup = ~Place,
color = "red",
fillOpacity = 1,
opacity = 1) %>%
addLayersControl(
baseGroups = c("Ortho", "OSM"),
position = "topright") %>%
addScaleBar(position = "bottomright")
