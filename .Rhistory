base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px; color:#FF0000'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:'Courier New'; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:verdana; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:arial; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:arial; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:arial; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, group)
}, df_filtered$Groups, df_filtered$color)
df_filtered$Groups <- stringr::str_to_upper(df_filtered$Groups)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:arial; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, stringr::str_to_upper(group))
}, df_filtered$Groups, df_filtered$color)
# df_filtered$Groups <- stringr::str_to_upper(df_filtered$Groups)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
# saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
library(DT)
library(readxl)
library(stringr)
## Link level 1 (groups), color groups, add hyperlinks to TSVs
# ex: https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_Condition%20Assessment.tsv
base_url <- "https://github.com/eamena-project/eamena-arches-dev/blob/main/data/bulk/templates/doc/bu_"
mds.path <- "C:/Rprojects/eamena-arches-dev/dbs/database.eamena/data/reference_data/mds/"
mds.template <- paste0(mds.path, "mds-template.xlsx")
df <- read_excel(mds.template, sheet = 1)
df_filtered <- df[, c("level1", "color")]
df_filtered$color <- sub("^(.{7}).*", "\\1", df_filtered$color)
# df_filtered$color <- paste0(df_filtered$color, "95")
df_filtered <- df_filtered[!duplicated(df_filtered), ]
colnames(df_filtered)[colnames(df_filtered) == 'level1'] <- 'Groups'
df_filtered$Groups <- stringr::str_to_title(df_filtered$Groups)
# Apply the color and hyperlink together
df_filtered$Groups <- mapply(function(group, color) {
# sprintf("<a href='%s%s.tsv' target='_blank' style='background-color:%s; padding: 5px; font-size: 20px;'>%s</a>",
#         base_url, gsub(" ", "%20", group), color, group)
sprintf("<a href='%s%s.tsv' target='_blank' style='font-size: 20px; font-family:arial; color:%s'>%s</a>",
base_url, gsub(" ", "%20", group), color, stringr::str_to_upper(group))
}, df_filtered$Groups, df_filtered$color)
# df_filtered$Groups <- stringr::str_to_upper(df_filtered$Groups)
dt_widget <- datatable(df_filtered[ , c("Groups"), drop=FALSE], escape = FALSE,
rownames = FALSE,
options = list(paging = FALSE, searching = FALSE, info = FALSE, autoWidth = TRUE))
dt_widget
saveWidget(dt_widget, paste0(mds.path, '/field-to-tsv.html'), selfcontained = TRUE)
remotes::install_github("rstudio/learnr")
df <- data.frame(
Column1 = c("A", "B", "C"), # Column 1 with 3 rows of data
Column2 = c(1, 2, 3)        # Column 2 with 3 rows of numeric data
)
df
ggplot2::ggplot(df)
ggplot(df, aes(x = blade, y = length)) +
geom_histogram()
library(ggplot2)
ggplot(df, aes(x = blade, y = length)) +
geom_histogram()
df <- data.frame(
blade = c("A", "B", "C"), # Column 1 with 3 rows of data
length = c(10.1, 8.2, 9.3)        # Column 2 with 3 rows of numeric data
)
library(ggplot2)
ggplot(df, aes(x = blade, y = length)) +
geom_histogram()
ggplot(df, aes(x = blade, y = length)) +
geom_bar(stat = "identity")
library(ggplot2)
df <- data.frame(
blade = c("A", "B", "C"),
length = c(10.1, 8.2, 9.3)
)
my_barplot <- function(df){
g <- ggplot(df, aes(x = blade, y = length)) +
geom_bar(stat = "identity")
return(g)
}
## here
my_barplot(df)
df <- data.frame(
blade = c("A", "B", "C"),
length = c(10.1, 8.2, 9.3)
)
my_barplot <- function(df = NA, color = "steelblue"){
g <- ggplot2::ggplot(df, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
df <- data.frame(
blade = c("A", "B", "C"),
length = c(10.1, 8.2, NA)
)
my_barplot <- function(df = NA, color = "steelblue"){
g <- ggplot2::ggplot(df, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?")
)
df_clean <- df[is.numeric(), ]
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?"),
)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?")
)
my_barplot <- function(df = NA, color = "steelblue"){
# only columns with numeric values
df_clean <- df %>%
dplyr::select(where(is.numeric))
# create the plot
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
library(learnr)
library(ggplot2)
library(dplyr)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?")
)
my_barplot <- function(df = NA, color = "steelblue"){
# only columns with numeric values
df_clean <- df %>%
dplyr::select(where(is.numeric))
# create the plot
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
df_clean <- df %>%
dplyr::select(where(is.numeric))
df_clean
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?"),
stringsAsFactors = FALSE
)
my_barplot <- function(df = NA, color = "steelblue"){
# only columns with numeric values
df_clean <- df %>%
dplyr::select(where(is.numeric))
# create the plot
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?"),
stringsAsFactors = FALSE
)
df_clean <- df %>%
dplyr::select(where(is.numeric))
df_clean
df
df_clean <- df[!is.na(as.numeric(df))]
df_clean <- df[!is.na(as.numeric(df)), ]
df_clean <- df[!is.na(as.numeric(df$length)), ]
df_clean
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, NA, "?"),
stringsAsFactors = FALSE
)
my_barplot <- function(df = NA, color = "steelblue"){
# only rows with numeric values
df_clean <- df[!is.na(as.numeric(df$length)), ]
# create the plot
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
return(g)
}
## here
my_barplot(df)
df_clean <- df[!is.na(as.numeric(df$length)), ]
ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = color)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 8.2, 9.3, 0.74)
)
my_barplot <- function(df = NA){
df_clean <- df[df$length > 4, ]
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue")
return(g)
}
## here
my_barplot(df)
df <- data.frame(
blade = c("A", "B", "C", "D"),
length = c(10.1, 0.82, 9.3, 7.4)
)
my_barplot <- function(df = NA){
df_clean <- df[df$length > 4, ]
g <- ggplot2::ggplot(df_clean, ggplot2::aes(x = blade, y = length)) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue")
return(g)
}
## here
my_barplot(df)
