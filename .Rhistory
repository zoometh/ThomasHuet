library(dplyr)
library(plotly)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
reg.example <- plot_ly(Oxford.water, x = ~OxfordDst, width = 1200) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text',
visible = "legendonly") %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = + 0.1,
x = 0.5))
reg.example
library(plotly)
library(archdata)
library(reshape2)
data(OxfordPots)
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ggplot(ws.melt, aes(x = "", y = value, fill = variable)) +
facet_grid(Place ~ .) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void()
head(ws.melt)
unique(ws.melt$Place)
a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
df
count(diamonds, cut)
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig
length(unique(ws.melt$Place))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=2, columns=length(unique(ws.melt$Place))),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=length(unique(ws.melt$Place)), columns=0),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=0),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
labels <- paste0(" ", rownames(df), ". ", df$Place)
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = labels, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
df
finePots[finePots$Place == a.place, ]
rownames(finePots[finePots$Place == a.place, ])
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
labels <- paste0(rownames(finePots[finePots$Place == a.place, ]), ". ", a.place)
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = labels, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
shiny::runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2')
devtools::install_github("eamena-oxford/eamenaR")
devtools::install_github("eamena-oxford/eamenaR", INSTALL_opts = '--no-lock')
devtools::install_github("eamena-oxford/eamenaR")
devtools::install_github("eamena-oxford/eamenaR")
shiny::runApp('teachings/stats/_stats/dim3')
dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
paste0(getwd(), "/dfisotops.csv")
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"<sup>206/204</sup>Pb: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"<sup>207/204</sup>Pb: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"<sup>208/204</sup>Pb: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
head(dfisotops)
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
schema(F)$traces$scatter$attributes$marker$symbol$values
unique(dfisotops$object)
unique(dfisotops$symbol)
unique(dfisotops$object)
symbols.used <- symbols[:2]
symbols.used <- symbols[c(1:2)]
symbols <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
c(1:2)
symbols.used <- symbols[c(1:2)]
symbols.used
objects.used <- unique(dfisotops$object)
symbols.used <- symbols[c(1:length(objects.used))]
#TODO: pass this assignations to itineRis 'symbol' calculation
symbols.default <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
objects.used <- unique(dfisotops$object)
symbols.used <- symbols.default[c(1:length(objects.used))
]
symbols.used
symbols.objects <- data.frame(objects = objects.used,
symbols = symbols.used))
symbols.default <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
objects.used <- unique(dfisotops$object)
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(objects = objects.used,
symbols = symbols.used)
symbols.objects
dfisotops <- merge(dfisotops, symbols.objects, by = "objects", all.x = TRUE)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
#TODO: pass this assignations to itineRis 'symbol' calculation
symbols.default <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
objects.used <- unique(dfisotops$object)
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(object = objects.used,
symbol = symbols.used)
dfisotops <- merge(dfisotops, symbols.objects, by = "object", all.x = TRUE)
runApp('teachings/stats/stats/dim3')
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
#TODO: pass this assignations to itineRis 'symbol' calculation
symbols.default <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
objects.used <- unique(dfisotops$object)
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(object = objects.used,
symbol = symbols.used)
dfisotops <- merge(dfisotops, symbols.objects, by = "object", all.x = TRUE)
dfisotops
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
#TODO: pass this assignations to itineRis 'symbol' calculation
symbols.default <- c('circle', 'square', 'triangle-up', 'diamond', 'star', 'cross')
objects.used <- unique(dfisotops$object)
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(object = objects.used,
symbol = symbols.used)
dfisotops <- merge(dfisotops, symbols.objects, by = "object", all.x = TRUE)
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"<sup>206/204</sup>Pb: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"<sup>207/204</sup>Pb: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"<sup>208/204</sup>Pb: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
m <- list(
l = 50,
r = 50,
b = 50,
t = 100,
pad = 20
)
head(dfisotops)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
head(dfisotops)
runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim3')
colnames(dfisotops)
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
h,
n = 20,
lims = c(range(x), range(y), range(z)))
X
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(range(x), range(y), range(z)))
X
?misc3d::kde3d
X <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
X
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
library(misc3d)
library(MASS)
library(misc3d)
library(rgl)
library(oce)
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
title3d(xlab = "x", ylab = "y", zlab = "z")
title3d(xlab = "x", ylab = "y", zlab = "z")
library(misc3d)
library(MASS)
library(misc3d)
library(rgl)
library(oce)
dfisotops <- read.csv2("https://raw.githubusercontent.com/zoometh/thomashuet/main/teachings/stats/stats/dim3/dfisotops.csv", sep = ";") # GH
dens3d <- misc3d::kde3d(dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]],
n = 40,
lims = c(
range(dfisotops[["Pb206_Pb204"]]),
range(dfisotops[["Pb207_Pb204"]]),
range(dfisotops[["Pb208_Pb204"]])
)
)
# Find the estimated density at each observed point
datadensity <- approx3d(dens3d$x, dens3d$y, dens3d$z,
dens3d$d,
dfisotops[["Pb206_Pb204"]],
dfisotops[["Pb207_Pb204"]],
dfisotops[["Pb208_Pb204"]])
# Find the contours
prob <- .5
levels <- quantile(datadensity, probs = prob, na.rm = TRUE)
# Plot it
colours <- c("gray", "orange")
cuts <- cut(datadensity, c(0, levels, Inf))
for (i in seq_along(levels(cuts))) {
gp <- as.numeric(cuts) == i
spheres3d(dfisotops[gp, "Pb206_Pb204"],
dfisotops[gp, "Pb207_Pb204"],
dfisotops[gp, "Pb208_Pb204"],
col = colours[i],
radius = 0.2)
}
box3d(col = "gray")
contour3d(dens3d$d, level = levels,
x = dens3d$x, y = dens3d$y, z = dens3d$z, #exp(-12)
alpha = .1, color = "red", color2 = "gray", add = TRUE)
title3d(xlab = "x", ylab = "y", zlab = "z")
?title3d
library(MASS)
library(ks)
library(misc3d)
x <- dfisotops[ , c("Pb206_Pb204", "Pb207_Pb204", "Pb208_Pb204")]
H.pi <- Hpi(x, pilot = "samse")
fhat <- kde(x, H = H.pi, compute.cont = TRUE)
plot(fhat, drawpoints = TRUE)
x <- rnorm(1000)
y <- 2 + x*rnorm(1000,1,.1) + rnorm(1000)
library(MASS)
den3d <- kde2d(x, y)
persp(den3d, box=FALSE)
shiny::runApp('teachings/stats/stats/dim3')
runApp('teachings/stats/stats/dim2')
runApp('teachings/stats/stats/dim2-map')
runApp('teachings/stats/stats/dim2-map')
?Sys.getlocale
shiny::runApp('teachings/stats/stats/dim3')
?Sys.setlocale
schema(F)$traces$scatter$attributes$marker$symbol$values
class(schema(F)$traces$scatter$attributes$marker$symbol$values)
schema(F)$traces$scatter$attributes$marker$symbol$values
