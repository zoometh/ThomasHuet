'" style="width: 55vw; max-width: 200px;" >')
dbDisconnect(con)
m <- leaflet() %>%
setView(lng = stele.chef$x, lat = stele.chef$y, zoom=18) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=roches.Me$x, lat=roches.Me$y, popup="roche gravée",radius = 1,opacity = 0.3) %>%
addCircleMarkers(lng=stele.chef$x, lat=stele.chef$y,
# label = ~lapply(paste0("<b>","Stèle du chef de tribu","</b> <br>",
#                            Plan_lk),
#                     htmltools::HTML),
# popup="Stèle du chef de tribu",
popup = paste0("<img src = ", Plan_lk, ">","<br>",Plan_lk),
# label = ~lapply(paste0("<b>",as.character("stele.chef"),"</b> <br>",
#                        Plan_lk),
# htmltools::HTML),
color = "red",
radius = 2,
opacity = 0.7)
m
library(htmlwidgets)
saveWidget(m, file="m.html")
getwd()
library(kableExtra)
library(dplyr)
library(knitr)
library(magick)
library(leaflet)
library(RPostgreSQL)
library(rdrop2)
GHimgs <- "https://github.com/zoometh/C14/tree/main/docs/imgs/"
# setwd("F:\\Perso")
token <- readRDS("droptoken.rds")
drop_acc(dtoken = token)
drop_dir()
f.bego.plan <- function(roches.xy){
# load plan from GDropBox
plan.path <- "D:\\\\Base de Donnees"
# \\\\Images\\\\Images Faces\\\\
roches.xy$Plan <- gsub(plan.path,"Bego",roches.xy[,"Plan"])
roches.xy$Plan <- gsub("\\\\","/",roches.xy[,"Plan"])
roches.xy$Plan_lk <- NA
for (i in 1:nrow(roches.xy)){
# i <- 1
a.img <- drop_media("Bego/Images/SS_Plan.bmp")
try(a.img <- drop_media(roches.xy[i,"Plan"]),
silent = T)
# a.img <- drop_media('Sauri/R11/IMG_8279.JPG')
roches.xy[i,"Plan_lk"] <- path.img <- paste0('<img src="',
a.img$link,
# 'https://drive.google.com/uc?export=view&id=',
# a.rock.fold,
# '1DBlLa-PnN2hWcAIoqf5jhb7rIOarIM7y',
'" style="width: 55vw; max-width: 200px;" >')
}
return(roches.xy)
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="bego",
host="localhost",
port=5432,
user="postgres",
password="postgres")
sqll <- "select zone,groupe,roche,nom,histoseule,geographie ,ST_X(ST_Transform(wkb_geometry, 4326)) as x ,ST_Y(ST_Transform(wkb_geometry, 4326)) as y from roches_gravees"
sqll <- paste0(sqll," where zone>0 and zone<13") # Me
roches.Me <- dbGetQuery(con,sqll)
stele.chef <- roches.Me[roches.Me$zone == 7 & roches.Me$groupe == 1 & roches.Me$roche == '8',]
stele.chef.lk <- drop_media("Bego/Images/Images Faces/ZVII/ZVIIGI/ZVIIGIR8.gif")
Plan_lk <- paste0('<img src="',
stele.chef.lk,
'" style="width: 55vw; max-width: 200px;" >')
dbDisconnect(con)
m <- leaflet() %>%
setView(lng = stele.chef$x, lat = stele.chef$y, zoom=18) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=roches.Me$x, lat=roches.Me$y, popup="roche gravée",radius = 1,opacity = 0.3) %>%
addCircleMarkers(lng=stele.chef$x, lat=stele.chef$y,
# label = ~lapply(paste0("<b>","Stèle du chef de tribu","</b> <br>",
#                            Plan_lk),
#                     htmltools::HTML),
# popup="Stèle du chef de tribu",
popup = paste0("<img src = ", Plan_lk, ">","<br>",Plan_lk),
# label = ~lapply(paste0("<b>",as.character("stele.chef"),"</b> <br>",
#                        Plan_lk),
# htmltools::HTML),
color = "red",
radius = 2,
opacity = 0.7)
m
library(htmlwidgets)
saveWidget(m, file="m.html")
library(kableExtra)
library(dplyr)
library(knitr)
library(magick)
library(leaflet)
library(RPostgreSQL)
library(rdrop2)
GHimgs <- "https://github.com/zoometh/C14/tree/main/docs/imgs/"
# setwd("F:\\Perso")
# token <- readRDS("droptoken.rds")
# drop_acc(dtoken = token)
# drop_dir()
f.bego.plan <- function(roches.xy){
# load plan from GDropBox
plan.path <- "D:\\\\Base de Donnees"
# \\\\Images\\\\Images Faces\\\\
roches.xy$Plan <- gsub(plan.path,"Bego",roches.xy[,"Plan"])
roches.xy$Plan <- gsub("\\\\","/",roches.xy[,"Plan"])
roches.xy$Plan_lk <- NA
for (i in 1:nrow(roches.xy)){
# i <- 1
a.img <- drop_media("Bego/Images/SS_Plan.bmp")
try(a.img <- drop_media(roches.xy[i,"Plan"]),
silent = T)
# a.img <- drop_media('Sauri/R11/IMG_8279.JPG')
roches.xy[i,"Plan_lk"] <- path.img <- paste0('<img src="',
a.img$link,
# 'https://drive.google.com/uc?export=view&id=',
# a.rock.fold,
# '1DBlLa-PnN2hWcAIoqf5jhb7rIOarIM7y',
'" style="width: 55vw; max-width: 200px;" >')
}
return(roches.xy)
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="bego",
host="localhost",
port=5432,
user="postgres",
password="postgres")
sqll <- "select zone,groupe,roche,nom,histoseule,geographie ,ST_X(ST_Transform(wkb_geometry, 4326)) as x ,ST_Y(ST_Transform(wkb_geometry, 4326)) as y from roches_gravees"
sqll <- paste0(sqll," where zone>0 and zone<13") # Me
roches.Me <- dbGetQuery(con,sqll)
stele.chef <- roches.Me[roches.Me$zone == 7 & roches.Me$groupe == 1 & roches.Me$roche == '8',]
stele.chef.lk <- drop_media("Bego/Images/Images Faces/ZVII/ZVIIGI/ZVIIGIR8.gif")
Plan_lk <- paste0('<img src="',
stele.chef.lk,
'" style="width: 55vw; max-width: 200px;" >')
dbDisconnect(con)
m <- leaflet() %>%
setView(lng = stele.chef$x, lat = stele.chef$y, zoom=18) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=roches.Me$x, lat=roches.Me$y, popup="roche gravée",radius = 1,opacity = 0.3) %>%
addCircleMarkers(lng=stele.chef$x, lat=stele.chef$y,
# label = ~lapply(paste0("<b>","Stèle du chef de tribu","</b> <br>",
#                            Plan_lk),
#                     htmltools::HTML),
# popup="Stèle du chef de tribu",
popup = paste0("<img src = ", Plan_lk, ">","<br>",Plan_lk),
# label = ~lapply(paste0("<b>",as.character("stele.chef"),"</b> <br>",
#                        Plan_lk),
# htmltools::HTML),
color = "red",
radius = 2,
opacity = 0.7)
m
library(htmlwidgets)
saveWidget(m, file="m.html")
token<-drop_auth()
drop_acc(dtoken = token)
drop_dir()
drop_media("Bego/Images/Images Faces/ZVII/ZVIIGI/ZVIIGIR8.gif")
drop_media("Bego/")
drop_auth()
token <- readRDS("droptoken.rds")
token
drop_acc(dtoken = token)
drop_dir()
drop_dir("Bego/Images/SS_Plan.bmp")
drop_dir("Bego/")
drop_dir("Bego")
library(grid)
library(png)
library(png)
library(grid)
img <- readPNG("https://github.com/zoometh/iconr/raw/master/vignettes/compar_eds_2_3.png")
library(png)
library(grid)
knitr::include_graphics("https://github.com/zoometh/iconr/raw/master/vignettes/compar_eds_2_3.png")
?include_graphics
shiny.apps.df <- data.frame(name=c("EUROEVOL_R",
"NeoNet",
"Bego"),
topic=c("Radiocarbon mapping",
"Radiocarbon mapping",
"Rock-art mapping"),
web.url=c("https://zoometh.github.io/C14/",
"https://zoometh.github.io/C14/neonet",
"https://zoometh.github.io/bego/"),
app.url=c("https://neolithic.shinyapps.io/Euroevol_R/",
"https://neolithic.shinyapps.io/NeoNet/",
"None"))
kable(shiny.apps.df,"html") %>%
kable_styling(full_width = FALSE, position = "center", font_size=10)
library(knitr)
library(kableExtra)
library(dplyr)
knitr::opts_chunk$set(echo = FALSE,  fig.align="center", fig.width = 12, fig.height = 12)
shiny.apps.df <- data.frame(name=c("EUROEVOL_R",
"NeoNet",
"Bego"),
topic=c("Radiocarbon mapping",
"Radiocarbon mapping",
"Rock-art mapping"),
web.url=c("https://zoometh.github.io/C14/",
"https://zoometh.github.io/C14/neonet",
"https://zoometh.github.io/bego/"),
app.url=c("https://neolithic.shinyapps.io/Euroevol_R/",
"https://neolithic.shinyapps.io/NeoNet/",
"None"))
kable(shiny.apps.df,"html") %>%
kable_styling(full_width = FALSE, position = "center", font_size=10)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H') # stabilise les images au bon endroit
library(knitr)
library(RPostgreSQL)
library(openxlsx)
#library(XLConnectJars)
#library(XLConnect)
library(FactoMineR)
library(ade4)
library(MASS)
library(kmed)
library(ggrepel)
library(tiff)
library(gridGraphics)
library(seriation)
library(fields)
library(grid)
library(gridExtra)
library(Bchron)
library(rmarkdown)
library(jpeg)
library(raster)
library(png)
library(ggdendro)
library(dendextend)
library(spatstat)
library(sf)
library(rgdal)
library(ggsn)
library(ggspatial)
library(pgis2r) # pour lire les Polygon de Postgres
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H') # stabilise les images au bon endroit
library(knitr)
library(RPostgreSQL)
library(openxlsx)
#library(XLConnectJars)
#library(XLConnect)
library(FactoMineR)
library(ade4)
library(MASS)
library(kmed)
library(ggrepel)
library(tiff)
library(gridGraphics)
library(seriation)
library(fields)
library(grid)
library(gridExtra)
library(Bchron)
library(rmarkdown)
library(jpeg)
library(raster)
library(png)
library(ggdendro)
library(dendextend)
library(spatstat)
library(sf)
library(rgdal)
library(ggsn)
library(ggspatial)
# library(pgis2r) # pour lire les Polygon de Postgres
setwd("D:/Cultures_9/PPNB/(Etude)")
mat.dist <- "D:/Cultures_9/PPNB/(Etude)/res_kh/mat_dist_1.xlsx" # issue de Python
dist_mtx <- openxlsx::read.xlsx(mat.dist,skipEmptyRows=TRUE)
# dist_mtx <- readWorksheetFromFile(mat.dist,
#                                   sheet = "Feuil1",
#                                   region = "A1:BH60",   # attention ? la plage
#                                   header = TRUE)
#current.folder <- getwd()
#tiff.folder <- paste(getwd(),'/tiffs',sep='')
png.folder <- paste(getwd(),'/res_kh/1_1/',sep='')
row.names(dist_mtx) <- as.character(dist_mtx[,1])
dist_mtx[,1]<- NULL
list.figs <- as.list(colnames(dist_mtx))
# simplifie les noms
colnames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = ".tif", replacement = "")
colnames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = "s_", replacement = "s")
colnames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = "stat_", replacement = "stat")
rownames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = ".tif", replacement = "")
rownames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = "s_", replacement = "s")
rownames(dist_mtx) <- gsub(x = names(dist_mtx), pattern = "stat_", replacement = "stat")
fig.tot <- length(list.figs)
fig.silex <- 0
fig.comp <- 0
#diag(dist_mtx) <- 0
f <- function(m) {
m[lower.tri(m)] <- t(m)[lower.tri(m)]
m
}
#nmes_img <- row.names(dist_mtx) # nom des images
fS <- function(dx,sl){
# informations sur les matrices et le dataset
if (sl == "all"){
select.s <- "[0-9]$"
}
if (sl == "silex"){
select.s <- "^s[0-9]"
}
if (sl == "statue"){
select.s <- "stat[0-9]*$"
}
if (sl == "statue_a"){
#print ("ggkj")
select.s <- "a$"
}
if (sl == "kh_ag"){ # Kharaysin et Ain Ghazal
# supprime les statues_a
#dx <- dist_mtx
dist.s <- dx[,c(grep("[0-9]$",names(dx))), drop=F] # colonnes
dist.s <- dist.s[grep("^s[0-9]", row.names(dist.s)),] # lignes
dist.s <- dist.s[,c(grep("^stat",names(dist.s))), drop=F] # colonnes
# quand on veut comparer les deux dataset (kh et ag), on ne supprime que
# les colonnes ou que les lignes
# supprime les statues (en col)
#♠dist.s <- dist.s[,c(grep("^s[0-9]",names(dx))), drop=F] # colonnes
# dist.s <- dist.s[grep("^s[0-9]", row.names(dist.s)),] # lignes
# dist.s <- dist.s[-grep("^stat", row.names(dist.s)),] # lignes
# dist.s <- dist.s[,c(-grep("^s[0-9]",names(dist.s))), drop=F] # colonnes
# dist.s <- dist.s[,c(-grep("a$",names(dist.s))), drop=F] # colonnes
}
if (sl != "kh_ag"){
dist.s <- dx[,c(grep(select.s,names(dx))), drop=F] # colonnes
dist.s <- dist.s[grep(select.s, row.names(dist.s)),] # lignes
}
#View(dist.s)
# Min
Mmin.s <- which(dist.s== min(dist.s,na.rm = TRUE), arr.ind = TRUE)
Mmin.s.val <- dist.s[Mmin.s[1],Mmin.s[2]]*100
Mmin.s.a <- rownames(Mmin.s)
Mmin.s.b <- colnames(dist.s[Mmin.s[2]])
# total
nb.s <- ncol(dist.s)
return(unique(c(Mmin.s.a,Mmin.s.b,nb.s)))
}
# Il faut que l'a'image de la matrice carr?e ait ?t? cr??e avec 'matrice_add_images_x.R' qui est dans le dosier 'scripts_r' de 'Projet Art Rupestre'
knitr::include_graphics('D:/Sites_10/Kharaysin/figuritas_silex2-hasta2018(con_siglas)light_light.png')
knitr::include_graphics('img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
knitr::include_graphics('/img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
getwd()
knitr::include_graphics('/img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
knitr::include_graphics('/img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
knitr::include_graphics(paste0(getwd(),'/img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
)
knitr::include_graphics('/img/figuritas_silex2-hasta2018(con_siglas)light_light.png')
knitr::include_graphics('kharaysin_bladelets.png')
knitr::include_graphics('img/kharaysin_bladelets.png')
mat1 <- 'D:/Cultures_9/PPNB/(Etude)/resultats/distance_matrix_part1.jpg'
include_graphics(mat1)
# prépare la composition ('isoMDS' isolé, car sinon s'affiche)
# clust.colors <- factor(c("blue","red","green","orange","violet"))
# names(clust.colors) <- c(1,2,3,4,5)
# prépare la composition ('isoMDS' isolé, car sinon s'affiche)
# clust.colors <- factor(c("blue","red","green","orange","violet"))
# names(clust.colors) <- c(1,2,3,4,5)
clust.colors <- c("blue","red","green","orange","violet")
fMDS_init <- function(dist_mtx,n_clust){
c <- as.dist(t(dist_mtx),dist.meth) # matrice des distances
d <- dist(c)
res <- hclust(d,method=clust.meth)
res$call <-NULL # pour ne pas que cela s'affiche
n <- nrow(dist_mtx) # pour couper l'arbre
MidPoint = (res$height[n-n_clust] + res$height[n-n_clust+1]) / 2
clusters <- cutree(res, k = n_clust, h = NULL) # enregistre les clusters
mds = isoMDS(c) #
mds_dat <- as.data.frame(mds$points)
mds_dat <- cbind(mds_dat,as.data.frame(clusters))
mds_dat$clusters = as.factor(mds_dat$clusters)
# ajoute les images et le lbl
mds_dat$img <- NA
mds_dat$img_nme <- NA
list_png <- list.files(png.folder)
for (png_ in list_png){
#print (png_)
for (j in row.names(mds_dat)){
png_o <- gsub(".png","",png_) # nom simple
png_o <- gsub("_","",png_o) # nom simple
png__ <- gsub(".png",".tif",png_) # nom complet
if (j == png_o){
mds_dat[j,"img"] <- paste(png.folder,png_,sep='')
mds_dat[j,"img_nme"] <- png_o
}
}
}
nme_mds_dat <- gsub(".tif", replacement = "", x = rownames(mds_dat))
return(mds_dat)
}
# renvoit un dendrogramme
fPlotDendro <- function(dist.mtx,nclusts,x.cut,rever){
if (rever){
col.gamme <- rev(clust.colors[0:nclusts]) # il faut inverser/à reprendre...
}
else {
col.gamme <- clust.colors[0:nclusts]
}
dendr <- as.dist(t(dist.mtx),dist.meth) %>%
scale %>%
dist %>%
hclust(clust.meth) %>%
as.dendrogram %>%
set("labels_col", value = col.gamme, k=nclusts) %>%
set("labels_cex", 0.7) %>%
#spar(cex.lab=0.3)
plot(horiz = TRUE)
abline(v = x.cut, lty = 2) # ligne qui coupe
}
zoom_clust <- FALSE
if (zoom_clust){
# subset
num_clus <- 1 # le num?ro du cluster s?lectionn?
mds_dat_clust <- mds_dat[mds_dat[, "clusters"] == num_clus,]
}
# renvoit un plan factoriel
fPlotMDS <- function(mds_dat_clust,img_nme,image,dim_img_stat,dim_img_s){
p <- ggplot(mds_dat_clust, aes(V1, V2, label = img_nme)) +
# p <- ggplot(mds_dat_clust,
#             aes(V1, V2,
#                 label = img_nme,
#                 colour = clusters
#             )) +
geom_point(aes(colour = factor(clusters)), size=1)+
scale_colour_manual(name="clusters", values = clust.colors)+
theme_bw()
# remplit une liste pour les images
param <- list()
for (i in 1:nrow(mds_dat_clust)){
image <- mds_dat_clust[i,"img"]
# distingue statues et silex
if (!grepl("stat", image)){
x_min <- mds_dat_clust[i,"V1"]-dim_img_s
x_max <- mds_dat_clust[i,"V1"]+dim_img_s
y_min <- mds_dat_clust[i,"V2"]-dim_img_s
y_max <- mds_dat_clust[i,"V2"]+dim_img_s
}
if (grepl("stat", image)){
x_min <- mds_dat_clust[i,"V1"]-dim_img_stat
x_max <- mds_dat_clust[i,"V1"]+dim_img_stat
y_min <- mds_dat_clust[i,"V2"]-dim_img_stat
y_max <- mds_dat_clust[i,"V2"]+dim_img_stat
}
img1 <- readPNG(image,native = TRUE)
g1 <- rasterGrob(img1, interpolate=FALSE)
param <- list(param,annotation_custom(g1,x_min,x_max,y_min,y_max))
}
gMDS <- p+param+
# geom_point(size=1,color = mds_dat_clust$clusters)+
geom_label_repel(aes(colour = factor(clusters)),
size=3,
segment.alpha=0.5,
label.padding = 0.1,
label.size = NA,
fill = "white")
# scale_colour_manual(values = clust.colors)
#geom_text_repel(size=3, segment.alpha=0.5)
return(gMDS) # obj ggplot
}
nclustsA <- 2 # nb clusters
select.s <- "stat[0-9]*a" # toutes sans les transformées
dist_mtx_kh <- dist_mtx[-grep(select.s, rownames(dist_mtx)), ]
dist_mtx_kh <- dist_mtx_kh[,-grep(select.s, colnames(dist_mtx_kh)) ]
# dendrogramme
fPlotDendro(dist_mtx_kh,nclustsA,25,TRUE)
dist.meth <- "euclidian" # "euclidian"
clust.meth <- "complete" #
select.s <- "stat[0-9]*a" # toutes sans les transformées
dist_mtx_kh <- dist_mtx[-grep(select.s, rownames(dist_mtx)), ]
dist_mtx_kh <- dist_mtx_kh[,-grep(select.s, colnames(dist_mtx_kh)) ]
# dendrogramme
fPlotDendro(dist_mtx_kh,nclustsA,25,TRUE)
dim_img_stat <- 0.05 # va servir a la taill de l'image statue
dim_img_s <- 0.05 # va servir a la taill de l'image silex
# plan
mds_dat_clust <- fMDS_init(dist_mtx_kh,nclustsA) # avec le nb de clusters
fPlotMDS(mds_dat_clust,img_nme,image,dim_img_stat,dim_img_s) # fonction plot
g <- fPlotMDS(mds_dat_clust,img_nme,image,dim_img_stat,dim_img_s) # fonction plot
class(g)
ggsave("C:/Users/supernova/Dropbox/My PC (supernova-pc)/Documents/thomashuet.github.io/img/mds.png",g)
ggsave("C:/Users/supernova/Dropbox/My PC (supernova-pc)/Documents/thomashuet.github.io/img/mds.svg",g)
library(cowplot)
library(cowplot)
fig_svg<-cowplot::ggdraw()+cowplot::draw_image("img/mds.svg")
plot(fig_svg)
# dist.meth <- "euclidian" # "euclidian"
# clust.meth <- "complete" # "ward.D2", "complete", "min"
# mat1 <- 'D:/Cultures_9/PPNB/(Etude)/resultats/distance_matrix_part1.jpg'
# include_graphics(mat1)
knitr::include_graphics('img/kharaysin_bladelets.png')
knitr::include_graphics('img/kharaysin_bladelets.png')
knitr::include_graphics('img/mds.png')
# library(cowplot)
# fig_svg<-cowplot::ggdraw()+cowplot::draw_image("img/mds.svg")
# plot(fig_svg)
# dist.meth <- "euclidian" # "euclidian"
# clust.meth <- "complete" # "ward.D2", "complete", "min"
# mat1 <- 'D:/Cultures_9/PPNB/(Etude)/resultats/distance_matrix_part1.jpg'
# include_graphics(mat1)
getwd()
getwd()
