datatable(df) %>%
formatStyle(row = "where",
background = c("magenta"))
?formatStyle
datatable(df) %>%
formatStyle(target = "row",
background = c("magenta"))
datatable(df) %>%
formatStyle(columns = "A",
target = target ,
background = c("magenta"))
datatable(df) %>%
formatStyle(columns = "where",
target = target ,
background = c("magenta"))
datatable(df) %>%
formatStyle(columns = "where",
target = "row" ,
background = c("magenta"))
datatable(df) %>%
formatStyle(columns = "where",
target = "row" ,
background = c("magenta", "pink"))
datatable(df) %>%
formatStyle(columns = "where",
target = "row" ,
background = c("magenta", "pink", "red"))
datatable(df) %>%
formatStyle(columns = c("where","when","what"),
target = "row" ,
background = c("magenta", "pink", "red"))
datatable(df) %>%
formatStyle(columns = c("where","when","what"),
target = "row" ,
background = c("magenta", "pink", "red"))
datatable(df) %>%
formatStyle(rows = c("A","B","C"),
target = "row" ,
background = c("magenta", "pink", "red"))
datatable(df) %>%
formatStyle(columns = "where",
rows = c("A","B","C"),
target = "row" ,
background = c("magenta", "pink", "red"))
datatable(df) %>%
formatStyle(columns = "where",
# rows = c("A","B","C"),
target = "row" ,
background = c("red"))
datatable(df) %>%
formatStyle(columns = "where",
rows = c("A"),
target = "row" ,
background = c("red"))
datatable(df) %>%
formatStyle(columns = "where",
rows = c(1),
target = "row" ,
background = c("red"))
library(DT)
datatable(iris) %>% formatStyle(
.,
columns = 1,
valueColumns = 0,
target = 'cell',
backgroundColor = styleEqual(3, 'red')
)
library(DT)
datatable(iris) %>%
formatStyle(.,
columns = 1,
valueColumns = c(0, 1),
target = 'cell',
backgroundColor = styleEqual(3, 'red')
)
library(DT)
datatable(iris) %>%
formatStyle(.,
columns = 2,
valueColumns = c(0, 1),
target = 'cell',
backgroundColor = styleEqual(3, 'red')
)
library(DT)
datatable(iris) %>%
formatStyle(.,
columns = c(1,2),
valueColumns = c(0, 1),
target = 'cell',
backgroundColor = styleEqual(3, 'red')
)
v1 <- row.names(df)
v1
v1 <- row.names(df)
cols1 <- ifelse(v1 =='A','red','')
datatable(df) %>%
formatStyle(0,
target = "row",
backgroundColor = styleEqual(v1, cols1))
v1 <- row.names(df)
A <- ifelse(v1 =='A','red','')
B <- ifelse(v1 =='B','green','')
datatable(df) %>%
formatStyle(0,
target = "row",
backgroundColor = styleEqual(v1, A)) %>%
formatStyle(0,
target = "row",
backgroundColor = styleEqual(v1, B))
?styleEqual
datatable(df) %>%
formatStyle(0,
target = "row",
backgroundColor = c(styleEqual(v1, A), styleEqual(v1, B)))
datatable(df) %>%
formatStyle(
'where','when',
backgroundColor = styleEqual(c("A", "B", "C"), c('gray', 'yellow', 'red'))
)
datatable(df) %>%
formatStyle(
rownames,
backgroundColor = styleEqual(c("A", "B", "C"), c('gray', 'yellow', 'red'))
)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df, rownames = FALSE) %>%
formatStyle(
feat,
backgroundColor = styleEqual(c("A", "B", "C"), c('gray', 'yellow', 'red'))
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"), c('gray', 'yellow', 'red'))
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('red', 'green', 'blue')),
opacity: 0.2
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('red', 'green', 'blue')),
opacity = 0.2
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF0000', 'green', 'blue'))
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000050', 'green', 'blue'))
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', 'green', 'blue'))
)
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
# df <- data.frame(where = c(20, 60, 60),
#                  when = c(10, 30, 20),
#                  what = c(70, 10, 20),
#                  row.names = c("A", "B", "C"))
# sites <- rownames(df)
# df
library(DT)
library(dplyr)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
ggtern(data = df, aes(x = where, y = when, z = what, col = sites)) +
theme_bw() +
geom_point(alpha = 0.5, size = 17) +
geom_point(size = 1, color = "black") +
theme_showarrows() +
theme(legend.position="none")
datatable(df, rownames = FALSE) %>%
formatStyle(
"feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
)
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
oxford.water <- Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
htmlwidgets::saveWidget(oxford.water, "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordwater.html")
runApp('teachings/stats/_stats/dim1')
library(shiny)
library(plotly)
library(archdata)
data("Mesolithic")
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
View(Mesolithic)
x <- Mesolithic[ , "Saws"]
ggplot() +
geom_point(aes(y = rep(0, length(x)), x = x)) +
theme_bw()
?ggplotly
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim1')
runApp('teachings/stats/_stats/dim2')
data(OxfordPots)
View(OxfordPots)
runApp('teachings/stats/_stats/dim2')
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
Oxford.lm.water <- lm(log(OxfordPct)~OxfordDst, Oxford.water)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
lm.water.R2 <- round(summary(lm.water)$r.squared, 2)
# no water
Oxford.nowater <- subset(OxfordPots, WaterTrans == 0)
Oxford.lm.nowater <- lm(log(OxfordPct)~OxfordDst, Oxford.nowater)
lm.nowater <- lm(OxfordPct ~ OxfordDst, data = Oxford.nowater)
lm.nowater.R2 <- round(summary(lm.nowater)$r.squared, 2)
Oxford.nowater$predicted <- predict(lm.nowater)   # Save the predicted values
Oxford.nowater$residuals <- residuals(lm.nowater) # Save the residual values
Oxford.nowater
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
shiny::runApp('teachings/stats/_stats/dim2')
data(OxfordPots)
View(OxfordPots)
runApp('teachings/stats/_stats/dim2')
?tooltip
library(plotly)
?tooltip
?ggplotly
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2')
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "<b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = + 0.1,
x = 0.5))
