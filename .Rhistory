kbl() %>%
kable_paper("hover", full_width = F)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
dt %>%
kbl() %>%
kable_paper("hover", full_width = F, font_size=12)
library(dplyr)
library(leaflet)
munsingen.long <- 7.569587484129203
munsingen.lat <- 46.864709895956004
leaflet(width = "60%", height = "400px") %>%
addTiles(group = 'OSM') %>%
addControl("Munsingen necropolis", position = "bottomright") %>%
addProviderTiles(providers$Esri.WorldImagery, group='Esri.WorldImagery') %>%
addMarkers(munsingen.long,
munsingen.lat,
label = "Munsingen necropolis") %>%
addLayersControl(
baseGroups = c('OSM', 'Esri.WorldImagery')) %>%
addScaleBar(position = "bottomleft")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text") %>%
layout(title = "Munsingen fibulae")
library(rgl)
options(rgl.useNULL = TRUE) # avoid the popup RGL device
nb.samp <- 12
# 12 graves with the numerous fibulae
Fibulae.nbGrave <- Fibulae %>%
count(Grave) %>%
arrange(-n) %>%
slice_head(n = nb.samp)
Fibulae.samp <- Fibulae[Fibulae$Grave %in% Fibulae.nbGrave$Grave, ]
# rainbow colors by graves
Fibulae.samp$color <- rainbow(nb.samp)[as.numeric(as.factor(Fibulae.samp$Grave))]
plot3d(
x = Fibulae$Length,
y = Fibulae$FA,
z = Fibulae$BH,
col = Fibulae.samp$color,
type = 's',
xlab = "Length",
ylab  ="Foot Angle",
zlab = "Bow Height")
rglwidget()
knitr::include_graphics("www/munsingen_fib_measures.png"){width="200px"}
knitr::include_graphics("www/munsingen_fib_measures.png")
knitr::include_graphics("www/munsingen_fib_measures.png")
## Cross-referencing
1 +1
![](www/munsingen_fib_measures.png){width=200}
![](www/munsingen_fib_measures.png){width=200}
#| out-width: "20%"
knitr::include_graphics("www/munsingen_fib_measures.png")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text") %>%
layout(title = "Munsingen fibulae")
?archdata
knitr::opts_chunk$set(fig.pos = "H")
knitr::opts_chunk$set(warning = FALSE)
library(archdata)
data(Fibulae)
Fibulae
View(Fibulae)
View(Fibulae.nbGrave)
View(Fibulae.ex)
View(Fibulae)
View(Fibulae)
?`archdata-package`
?Fibulae
library(quarto)
library(dplyr)
library(leaflet)
munsingen.long <- 7.569587484129203
munsingen.lat <- 46.864709895956004
leaflet(width = "90%", height = "300px") %>%
addTiles(group = 'OSM') %>%
addControl("Munsingen necropolis", position = "bottomright") %>%
addProviderTiles(providers$Esri.WorldImagery, group='Esri.WorldImagery') %>%
addMarkers(munsingen.long,
munsingen.lat,
label = "Munsingen necropolis") %>%
addLayersControl(
baseGroups = c('OSM', 'Esri.WorldImagery')) %>%
addScaleBar(position = "bottomleft")
library(plotly)
library(dplyr)
library(archdata)
data("Fibulae")
Fibulae.ex <- Fibulae
Fibulae.ex$lbl <- paste0("<b>Museum num.: ", Fibulae.ex$Mno, "</b><br>",
"Length: ", Fibulae.ex$Length, "<br>",
"Foot Angle: ", Fibulae.ex$FA, "<br>")
plot_ly(data = Fibulae.ex,
x = ~Length,
y = ~FA,
text = ~lbl,
hoverinfo = "text")
img <- exiftoolr::exif_read("https://raw.githubusercontent.com/zoometh/thomashuet/master/teachings/stats/images/data-meta-photo-microliths.jpg")
library(kableExtra)
#| code-fold: true
#| code-summary: "Show the code"
df <- data.frame(row.names = c("site_A", "site_B", "site_C", "site_D"),
Microliths =  c(10, 5, NA, 2),
Scrapers =  c(7, 6, 10, 5),
Burins =  c(13, 7, 4, NA))
kable(df) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
sum.df.with.na <- colSums(df)
sum.df.with.na
class(sum.df.with.na)
sum.df.with.na <- as.data.frame(colSums(df))
sum.df.with.na
sum.df.with.na <- as.data.frame(t(colSums(df)))
sum.df.with.na
#| code-fold: true
#| code-summary: "Show the code"
sum.df.with.na <- as.data.frame(t(colSums(df)))
kable(sum.df.with.na) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| code-fold: true
#| code-summary: "Show the code"
sum.df.with.na <- as.data.frame(t(colSums(df, na.rm = T)))
kable(sum.df.with.na) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('very cold', 'cold', 'lukewarm', 'hot', 'very hot')
colors <- RColorBrewer::brewer.pal(length(ncolors), name = "RdBu")
df <- data.frame(values = ncolors,
colors = rev(colors))
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
library(DT)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('very cold', 'cold', 'lukewarm', 'hot', 'very hot')
colors <- RColorBrewer::brewer.pal(length(ncolors), name = "RdBu")
df <- data.frame(values = ncolors,
colors = rev(colors))
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('green', 'yellow', 'red')
colors <- c('#00FF00', '#FFFF00', '#FF0000')
df <- data.frame(values = ncolors,
colors = colors)
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
shiny::runApp('teachings/stats/stats/gmm')
runApp('teachings/stats/stats/dim3')
install.packages("Factoshiny")
shiny::runApp('teachings/stats/stats/seriation')
## Not run:
require(FactoMineR)
library(FactoMineR)
data(children)
res.shiny=CAshiny(children)
# Correspondance Analysis with Factoshiny:
res.shiny=CAshiny(children)
library(Factoshiny)
# Correspondance Analysis with Factoshiny:
res.shiny=CAshiny(children)
?CAshiny
res.shiny=CAshiny(seriat)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
res.shiny=CAshiny(seriat)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
res.shiny <- CAshiny(seriat)
shiny::runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
CA(df)
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(plotly)
library(archdata)
library(ggtern)
library(ggplot2)
library(DT)
library(dplyr)
library(FactoMineR)
library(Factoshiny)
data(OxfordPots)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
CA(df)
CA(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
res.ca <- CA(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
res.ca <- HCPC(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
print(dend.h)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(dend.h)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(dend.h, hang = 1)
?as.dendrogram
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(as.dendrogram(dend.h))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
dend.h.dist <- as.data.frame(dend.h.dist)
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
dend.h.dist <- round(dend.h.dist, 1)
dend.h.dist
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
dend.h.dist <- round(dend.h.dist, 2)
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
print(dt)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
dt
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
print(dt)
#| eval: true
#| echo: false
data("Mesolithic")
rownames(Mesolithic) <- paste0("site_", rownames(Mesolithic))
font.size <- "20pt"
Mesolithic %>%
DT::datatable(
options=list(
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}")
)
) %>%
formatStyle(
colnames(Mesolithic),
background = styleColorBar(Mesolithic$Microliths, 'lightblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
)
#| eval: true
#| echo: false
data("Mesolithic")
rownames(Mesolithic) <- paste0("site_", rownames(Mesolithic))
font.size <- "20pt"
Mesolithic %>%
DT::datatable(
width = "60%",
options=list(
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}")
)
)
gc()
::: {.column width="33%"}
Ordinal
::: {.column width="33%"}
Quantitative
gc()
