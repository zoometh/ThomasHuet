sum.df.with.na
sum.df.with.na <- as.data.frame(t(colSums(df)))
sum.df.with.na
#| code-fold: true
#| code-summary: "Show the code"
sum.df.with.na <- as.data.frame(t(colSums(df)))
kable(sum.df.with.na) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| code-fold: true
#| code-summary: "Show the code"
sum.df.with.na <- as.data.frame(t(colSums(df, na.rm = T)))
kable(sum.df.with.na) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('very cold', 'cold', 'lukewarm', 'hot', 'very hot')
colors <- RColorBrewer::brewer.pal(length(ncolors), name = "RdBu")
df <- data.frame(values = ncolors,
colors = rev(colors))
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
library(DT)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('very cold', 'cold', 'lukewarm', 'hot', 'very hot')
colors <- RColorBrewer::brewer.pal(length(ncolors), name = "RdBu")
df <- data.frame(values = ncolors,
colors = rev(colors))
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
#| code-fold: true
#| code-summary: "Show the code"
ncolors <- c('green', 'yellow', 'red')
colors <- c('#00FF00', '#FFFF00', '#FF0000')
df <- data.frame(values = ncolors,
colors = colors)
datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
shiny::runApp('teachings/stats/stats/gmm')
runApp('teachings/stats/stats/dim3')
install.packages("Factoshiny")
shiny::runApp('teachings/stats/stats/seriation')
## Not run:
require(FactoMineR)
library(FactoMineR)
data(children)
res.shiny=CAshiny(children)
# Correspondance Analysis with Factoshiny:
res.shiny=CAshiny(children)
library(Factoshiny)
# Correspondance Analysis with Factoshiny:
res.shiny=CAshiny(children)
?CAshiny
res.shiny=CAshiny(seriat)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
res.shiny=CAshiny(seriat)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
res.shiny <- CAshiny(seriat)
shiny::runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
runApp('teachings/stats/stats/seriation')
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
CA(df)
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(plotly)
library(archdata)
library(ggtern)
library(ggplot2)
library(DT)
library(dplyr)
library(FactoMineR)
library(Factoshiny)
data(OxfordPots)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
CA(df)
CA(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
res.ca <- CA(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
res.ca <- HCPC(df[ , c(2,3,4)])
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
print(dend.h)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(dend.h)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(dend.h, hang = 1)
?as.dendrogram
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist %>%
hclust
plot(as.dendrogram(dend.h))
dend.h <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
dend.h.dist <- as.data.frame(dend.h.dist)
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
dend.h.dist <- round(dend.h.dist, 1)
dend.h.dist
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dend.h.dist <- df[ , c(2,3,4)] %>%
scale %>%
dist
dend.h.dist <- as.data.frame(as.matrix(dend.h.dist))
dend.h.dist <- round(dend.h.dist, 2)
kable(dend.h.dist) %>%
kable_styling(full_width = FALSE, position = "center", font_size = 24)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
print(dt)
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
dt
df <- data.frame(feat = c("A", "B", "C"),
where = c(20, 60, 60),
when = c(10, 30, 20),
what = c(70, 10, 20),
row.names = c("A", "B", "C"))
dt <- datatable(df,
rownames = FALSE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
# pagingType = "numbers",
# PageLength = 1,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
# language = list(lengthMenu = "_MENU_"),
filter = "none")) %>%
formatStyle("feat",
backgroundColor = styleEqual(c("A", "B", "C"),
c('#FF000070', '#00800070', '#0000FF70'))
) %>%
formatStyle(columns = c(1, 2, 3, 4),
fontSize = '20px')
print(dt)
#| eval: true
#| echo: false
data("Mesolithic")
rownames(Mesolithic) <- paste0("site_", rownames(Mesolithic))
font.size <- "20pt"
Mesolithic %>%
DT::datatable(
options=list(
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}")
)
) %>%
formatStyle(
colnames(Mesolithic),
background = styleColorBar(Mesolithic$Microliths, 'lightblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
)
#| eval: true
#| echo: false
data("Mesolithic")
rownames(Mesolithic) <- paste0("site_", rownames(Mesolithic))
font.size <- "20pt"
Mesolithic %>%
DT::datatable(
width = "60%",
options=list(
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", font.size, "'});"),
"}")
)
)
gc()
::: {.column width="33%"}
Ordinal
::: {.column width="33%"}
Quantitative
gc()
# run this script to create an HTML regression of Oxford plots
library(ggplot2)
library(archdata)
library(dplyr)
library(plotly)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
reg.example <- plot_ly(Oxford.water, x = ~OxfordDst, width = 1200, height = 500) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text',
visible = "legendonly") %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = -0.2,
x = 0.5))
reg.example
# run this script to create an HTML regression of Oxford plots
library(ggplot2)
library(archdata)
library(dplyr)
library(plotly)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
reg.example <- plot_ly(Oxford.water, x = ~OxfordDst, width = 1200, height = 700) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text',
visible = "legendonly") %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = -0.5,
x = 0.5))
reg.example
htmlwidgets::saveWidget(reg.example, "C:/Rprojects/thomashuet/teachings/stats/stats/dim2/oxfordwater.html")
#| echo: true
ncolors <- 5
x <- sort(sample.int(100, ncolors))
colors <- RColorBrewer::brewer.pal(ncolors, name = "YlGn")
df <- data.frame(values = x,
colors = colors)
dt <- datatable(df,
rownames = TRUE,
width = '20%',
options = list(searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
scrollX = F,
initComplete = JS("function(settings, json) {$(this.api().table().header()).css({'font-size' : '20px'});}"),
info = FALSE,
filter = "none")) %>%
formatStyle("colors",
backgroundColor = styleEqual(colors,
colors)
)
shiny::runApp('teachings/stats/stats/seriation')
