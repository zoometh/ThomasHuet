ca
ca <-prcomp(xdat, scale = FALSE)
plot(ca)
res.pca <-prcomp(xdat, scale = FALSE)
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(res.pca,
# col.ind = "cos2", # Color by the quality of representation
# gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
res.pca
xdat
df_lda.per
xdat <- df_lda.per[ , -which(names(df_lda.per) %in% c(typSite_column))]
xdat
res.pca <- prcomp(xdat, scale = FALSE)
fviz_pca_ind(res.pca,
# col.ind = "cos2", # Color by the quality of representation
# gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
res.pca <- prcomp(xdat, scale = FALSE)
fviz_pca_ind(res.pca,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969",
# col.ind = "cos2", # Color by the quality of representation
# gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
plot(ca)
fviz_pca_ind(res.pca,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969",
# col.ind = "cos2", # Color by the quality of representation
# gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
res.pca
xdat
res.pca <- prcomp(xdat, scale = TRUE)
fviz_pca_ind(res.pca,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969",
# col.ind = "cos2", # Color by the quality of representation
# gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
xdat
fviz_eig(res.pca)
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
#| warning: false
#| message: false
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
legend = list(orientation = "h",   # show entries horizontally
xanchor = "center",  # use center of legend as anchor
x = 0.5))             # put legend in center of x-axis
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",   # show entries horizontally
xanchor = "center",  # use center of legend as anchor
x = 0.5))             # put legend in center of x-axis
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = 0,
x = 0.5))
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.1,
x = 0.5))
library(ggplot2)
library(archdata)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0(Oxford.water$Place, "<br>", Oxford.water$OxfordPct)
residuals <- paste0(Oxford.water$Place, "<br>", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
Oxford.water %>%
plot_ly(x = ~OxfordDst) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text') %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text') %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text') %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = - 0.2,
x = 0.5))
library(archdata)
data("Mesolithic")
Mesolithic
runApp('profiles/oxford/stats/GOA/stats/dim1')
runApp('profiles/oxford/stats/GOA/stats/dim1')
runApp('profiles/oxford/stats/GOA/stats/dim1')
runApp('profiles/oxford/stats/GOA/stats/dim2')
runApp('profiles/oxford/stats/GOA/stats/pointpattern')
runApp('profiles/oxford/stats/GOA/stats/pointbasic')
runApp('profiles/oxford/stats/GOA/stats/dim3')
runApp('profiles/oxford/stats/GOA/stats/seriation')
#| echo: false
library(ca)
seriat <- read.csv("https://raw.githubusercontent.com/keltoskytoi/Multivariate_Statistics_Szentloerinc/master/DATA/fibulae.csv", row.name = 1)
print(seriat)
ca(seriat)
print(seriat)
ca(seriat)
ca(seriat)
plot(ca(seriat))
#| echo: true
library(knitr)
df <- data.frame(row.names = c("A", "B", "C", "D"),
pots1 =  c(10, 5, NA, 2),
pots2 =  c(7, 6, 10, 5),
pots3 =  c(13, 7, 4, NA))
kable(df)
# remove NA
kable(colSums(df, na.rm = T))
# without removing NA
colSums(df)
dist = rnorm(n=1000, m=24.2, sd=2.2)
runApp('profiles/oxford/stats/GOA/stats/normal')
dist = rnorm(n=1000, m=24.2, sd=2.2)
dist
y <- rnorm(n=1000, m=24.2, sd=2.2)
x <- seq(-5, 5, length = 1000)
gplot <- ggplot() +
geom_line(aes(x, y), color = "black") +
ylim(0, 1) +
theme_bw()
gplot
y <- rnorm(n=1000, m=24.2, sd=2.2)
x <- seq(-5, 5, length = 1000)
gplot <- ggplot() +
geom_line(x, y, color = "black") +
ylim(0, 1) +
theme_bw()
gplot
x
y <- rnorm(n=1000, m=24.2, sd=2.2)
x <- seq(-5, 5, length = 1000)
gplot <- ggplot() +
geom_line(aes(x, y), color = "black") +
ylim(0, 1) +
theme_bw()
gplot
y <- rnorm(n=1000, m=24.2, sd=2.2)
x <- seq(-5, 5, length = 1000)
gplot <- ggplot() +
geom_line(aes(x, y), color = "black") +
theme_bw()
gplot
dpois(x, lambda, log = FALSE)
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, pbinom(x, 100, 0.01), type = "s", ylab = "F(x)",
main = "Binomial(100, 0.01) CDF")
dpois(0:20, 1)
lines(dpois(0:20, 1), type = "o", col = colors[i])
lines(dpois(0:20, 1), type = "o", col = "blue")
lines(dpois(0:20, 1), type = "o", col = "blue")
plot(dpois(0:20, 1), type = "o", xlab="y", ylab = "P(y)",
col = "blue")
plot(dpois(0:20, 2), type = "o", xlab="y", ylab = "P(y)",
col = "blue")
plot(d, type = "o", xlab="y", ylab = "P(y)",
col = "blue")
d <- dpois(0:20, 2)
plot(d, type = "o", xlab="y", ylab = "P(y)",
col = "blue")
median(d)
d <- dpois(0:20, 2)
x <- seq(0, 20, length = 20)
ggplot() +
geom_line(aes(x, d), color = "black") +
theme_bw()
d <- dpois(0:20, 2)
x <- seq(0, 20, length = 21)
ggplot() +
geom_line(aes(x, d), color = "black") +
theme_bw()
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median)
theme_bw()
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median) +
theme_bw()
median
y <- dpois(0:20, 2)
x <- seq(0, 20, length = 21)
median.y <- median(y)
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median.y) +
theme_bw()
y
x
x*y
y <- dpois(0:20, 2)
x <- seq(1, 20, length = 20)
median.y <- median(y)
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median.y) +
theme_bw()
y <- dpois(0:20, 2)
x <- seq(1, 20, length = 21)
median.y <- median(y)
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median.y) +
theme_bw()
y <- dpois(0:20, 2)
x <- seq(1, 20, length = 21)
median.y <- median(y*x)
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median.y) +
theme_bw()
y <- dpois(0:20, 52)
x <- seq(1, 20, length = 21)
median.y <- median(y*x)
ggplot() +
geom_line(aes(x, y), color = "blue") +
geom_vline(xintercept = median.y) +
theme_bw()
library(rcarbon)
data(emedyd)
levant <- emedyd[emedyd$Region=="1", ]
bins <- binPrep(levant$SiteName,
levant$CRA,
h = 50)
x <- calibrate(levant$CRA,
levant$Error,
normalised = FALSE)
spd.levant <- spd(x,
bins=bins,
timeRange = c(17000, 8500))
dirIn <- "https://raw.githubusercontent.com/zoometh/neonet/main/inst/extdata/"
fileIn <- "140_140_id00140_doc_elencoc14.tsv"
dataIn <- paste0(dirIn, fileIn)
C14 <- read.csv2(dataIn, sep = "\t")
C14cal <- calibrate(x = C14[1, "C14Age"],
errors = C14[1, "C14SD"],
calCurves='intcal20')
C14cal$grids
C14[1:2, "C14Age"]
colnames(C14)
C14[1:2, "C14Age"]
bins <- binPrep(C14[1:2, "SiteName"],
C14[1:2, "C14Age"],
h = 50)
x <- calibrate(C14[1:2, "C14Age"],
C14[1:2, "C14SD"],
normalised = FALSE)
spd.levant <- spd(x,
bins=bins,
timeRange = c(7000, 4000))
plot(spd.levant,
runm = 50,
xlim = c(6500, 4500))
bins <- binPrep(C14[1:2, "SiteName"],
C14[1:2, "C14Age"],
h = 50)
x <- calibrate(C14[1:2, "C14Age"],
C14[1:2, "C14SD"],
normalised = FALSE)
spd.levant <- spd(x,
bins=bins,
timeRange = c(7000, 4000))
plot(spd.levant,
runm = 50,
xlim = c(6500, 5000))
shiny::runApp('profiles/oxford/stats/GOA/stats/dim1')
runApp('profiles/oxford/stats/GOA/stats/pointpattern')
runApp('profiles/oxford/stats/GOA/stats/pointpattern')
runApp('profiles/oxford/stats/GOA/stats/pointbasic')
runApp('profiles/oxford/stats/GOA/stats/pointbasic')
file.path <- paste0(getwd(), "/arrowheads.RDS")
arrow.heads <- readRDS(file = file.path)
arrow.heads <- readRDS("C:/Rprojects/thomashuet/profiles/oxford/stats/GOA/stats/gmm/arrowheads.RDS")
nrow(arrow.heads )
length(arrow.heads)
arrow.heads$coo
length(arrow.heads$coo)
runApp('profiles/oxford/stats/GOA/stats/gmm')
runApp('profiles/oxford/stats/GOA/stats/gmm')
runApp('profiles/oxford/stats/GOA/stats/dim3')
runApp('profiles/oxford/stats/GOA/stats/seriation')
runApp('profiles/oxford/stats/GOA/stats/dim1')
