)
map <- leaflet(df.both)
map
map <- leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM")
View(df.both)
View(df.both)
map <- leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
map <- leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addMinicharts(
lng = ~lon,
lat = ~lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]
)
sapply(df.both, class)
?addMinicharts
map <- leaflet(Place.coords) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1)
map <- map %>%
addCircleMarkers(data = df.both,
lng = ~lon,
lat = ~lat,
weight = 1,
radius = 4,
popup = ~Place,
color = "blue",
fillOpacity = 1,
opacity = 1)
map
map <- map %>%
addMinicharts(
lng = finePots$lon,
lat = finePots$lat,
type = "pie",
chartdata = finePots[, c("OxfordPct", "NewForestPct")],
colorPalette = colors
)
runApp('teachings/stats/_stats/dim2-map/app_1.R')
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]
)
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right') %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]
)
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
# addGraticule(interval = 1) %>%
# addMinicharts(
#   lng = df.both$lon,
#   lat = df.both$lat,
#   type = "pie",
#   chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
?add_text
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
add_text(x = ~lon, y = ~lat, text = ~Place, textposition = 'middle right')
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(df.both$lon, df.both$lat, label =  df.both$Place,
labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T))
leaflet(df.both) %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = ~lon,
lat = ~lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(df.both$lon,
df.both$lat,
label =  df.both$Place,
labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T))
leaflet() %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(df.both$lon,
df.both$lat,
label =  df.both$Place,
labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T))
leaflet() %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(data = df.both,
lng = ~lon,
lat = ~lat,
label =  df.both$Place,
labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T))
?addLabelOnlyMarkers
leaflet() %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(data = df.both,
lng = ~lon,
lat = ~lat,
label =  ~Place,
labelOptions = labelOptions(noHide = T,
direction = 'top',
textOnly = T,
style = list(
"color" = "black",
# "font-family" = "serif",
"font-style" = "normal",
"box-shadow" = "1px 1px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)",
"padding" = "2px"
)))
leaflet() %>%
addProviderTiles(providers$"OpenStreetMap", group = "OSM") %>%
# addProviderTiles(providers$"Esri.WorldImagery", group = "Ortho") %>%
addGraticule(interval = 1) %>%
addMinicharts(
lng = df.both$lon,
lat = df.both$lat,
type = "pie",
chartdata = df.both[, c("OxfordPct", "NewForestPct")]) %>%
addLabelOnlyMarkers(data = df.both,
lng = ~lon,
lat = ~lat,
label =  ~Place,
labelOptions = labelOptions(noHide = T,
direction = 'top',
textOnly = T,
style = list(
"color" = "black",
# "font-family" = "serif",
"font-style" = "bold",
# "box-shadow" = "1px 1px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)",
"padding" = "2px"
)))
runApp('teachings/stats/_stats/dim2-map/app_1.R')
colors
runApp('teachings/stats/_stats/dim2-map/app_2.R')
# run this script to create an HTML regression of Oxford plots
library(ggplot2)
library(archdata)
library(dplyr)
library(plotly)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
reg.example <- plot_ly(Oxford.water, x = ~OxfordDst, width = 1200) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text',
visible = "legendonly") %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = + 0.1,
x = 0.5))
htmlwidgets::saveWidget(reg.example, "C:/Rprojects/thomashuet/teachings/stats/_stats/dim2/oxfordwater.html")
runApp('teachings/stats/_stats/dim2-map/app.R')
runApp('teachings/stats/_stats/dim2-map/app.R')
runApp('teachings/stats/_stats/dim2')
runApp('teachings/stats/_stats/dim2-map/app.R')
# run this script to create an HTML regression of Oxford plots
library(ggplot2)
library(archdata)
library(dplyr)
library(plotly)
data("OxfordPots")
OxfordPots$OxfordPct.log <- log(OxfordPots$OxfordPct)
Oxford.water <- subset(OxfordPots, WaterTrans == 1)
lm.water <- lm(OxfordPct ~ OxfordDst, data = Oxford.water)
r2 <- round(summary(lm.water)$r.squared, 2)
Oxford.water$predicted <- predict(lm.water)
Oxford.water$residuals <- residuals(lm.water)
values <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (observed): ", Oxford.water$OxfordPct)
residuals <- paste0("<b>", Oxford.water$Place, "</b><br>",
"% Oxford Pottery (predicted): ", round(Oxford.water$predicted, 2))
m <- list(
l = 50,
r = 50,
b = 100,
t = 50,
pad = 20
)
reg.example <- plot_ly(Oxford.water, x = ~OxfordDst, width = 1200) %>%
add_trace(name = "Oxford Pottery", y = ~OxfordPct,
#mode = 'scatter',
marker = list(color = 'black'),
text = values,
hoverinfo = 'text') %>%
add_trace(name = "Predicted value", y = ~predicted, opacity = 0.5,
#mode = 'scatter',
marker = list(color = 'grey', line = list(color = 'grey', width = 1)),
text = residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
add_trace(name = "Regression line", x = ~OxfordDst, y = fitted(lm.water),
mode = 'lines', line = list(color = 'black', width = 2),
text = r2,
hoverinfo = 'text',
visible = "legendonly") %>%
add_segments(name = "Residuals",  x = ~OxfordDst, y =  ~OxfordPct,
xend = ~OxfordDst, yend = ~predicted,
mode = 'lines',
line = list(color = 'grey', width = 1, dash = 'dash'),
text = ~residuals,
hoverinfo = 'text',
visible = "legendonly") %>%
layout(title = paste0('Oxford pottery with a probable water transportation <br> (R<sup>2</sup> = ', r2, ")"),
xaxis = list(title = "Distance (miles)"),
yaxis = list(title = "Percentage of Oxford Pottery"),
margin = m,
legend = list(orientation = "h",
xanchor = "center",
y = + 0.1,
x = 0.5))
reg.example
library(plotly)
library(archdata)
library(reshape2)
data(OxfordPots)
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ggplot(ws.melt, aes(x = "", y = value, fill = variable)) +
facet_grid(Place ~ .) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void()
head(ws.melt)
unique(ws.melt$Place)
a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
df
count(diamonds, cut)
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig
length(unique(ws.melt$Place))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=2, columns=length(unique(ws.melt$Place))),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=length(unique(ws.melt$Place)), columns=0),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=0),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = a.place, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
labels <- paste0(" ", rownames(df), ". ", df$Place)
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = labels, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
df
finePots[finePots$Place == a.place, ]
rownames(finePots[finePots$Place == a.place, ])
library(plotly)
library(dplyr)
fig <- plot_ly()
finePots <- OxfordPots[!is.na(OxfordPots$OxfordPct) & !is.na(OxfordPots$NewForestPct), ]
labels <- paste0(" ", rownames(finePots), ". ", finePots$Place)
finePots <- finePots[ , c("Place", "OxfordPct", "NewForestPct")]
ws.melt <- melt(finePots)
ct <- 0
for(a.place in unique(ws.melt$Place)){
# a.place <- "Dorchester (Dorset)"
df <- ws.melt[ws.melt$Place == a.place, ]
labels <- paste0(rownames(finePots[finePots$Place == a.place, ]), ". ", a.place)
fig <- fig %>% add_pie(data = df, labels = ~variable, values = ~value,
name = labels, domain = list(row = ct, column = 0))
ct <- ct + 1
}
fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=ct, columns=1),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ct
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
shiny::runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2-map')
runApp('teachings/stats/_stats/dim2')
devtools::install_github("eamena-oxford/eamenaR")
devtools::install_github("eamena-oxford/eamenaR", INSTALL_opts = '--no-lock')
devtools::install_github("eamena-oxford/eamenaR")
devtools::install_github("eamena-oxford/eamenaR")
